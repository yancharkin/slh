"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkslh"] = self["webpackChunkslh"] || []).push([["dependencies"],{

/***/ "./node_modules/tonal-array/build/es6.js":
/*!***********************************************!*\
  !*** ./node_modules/tonal-array/build/es6.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compact: () => (/* binding */ compact),\n/* harmony export */   permutations: () => (/* binding */ permutations),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   shuffle: () => (/* binding */ shuffle),\n/* harmony export */   sort: () => (/* binding */ sort),\n/* harmony export */   unique: () => (/* binding */ unique)\n/* harmony export */ });\n/* harmony import */ var tonal_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tonal-note */ \"./node_modules/tonal-note/build/es6.js\");\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array)\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\n\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nfunction range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b ? ascR(a, b - a + 1) : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nfunction rotate(times, arr) {\n  var len = arr.length;\n  var n = (times % len + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nvar compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (n) {\n  var m = (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.midi)(n);\n  return m !== null ? m : (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.midi)(n + \"-100\");\n};\n\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nfunction sort(src) {\n  return compact(src.map(tonal_note__WEBPACK_IMPORTED_MODULE_0__.name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\nfunction unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisherâ€“Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nvar shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\nvar permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdG9uYWwtYXJyYXkvYnVpbGQvZXM2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dDOztBQUV4QztBQUNBO0FBQ0EsbUJBQW1CLEtBQUs7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsS0FBSztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtCQUErQixpQ0FBaUMsc0JBQXNCOztBQUU3RjtBQUNBO0FBQ0EsVUFBVSxnREFBSTtBQUNkLDBCQUEwQixnREFBSTtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsWUFBWSxPQUFPO0FBQ25CO0FBQ087QUFDUCx5QkFBeUIsNENBQUksMEJBQTBCLCtCQUErQjtBQUN0Rjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNPO0FBQ1AsK0NBQStDLG1DQUFtQztBQUNsRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxjQUFjO0FBQzFCO0FBQ087QUFDUCwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xoLy4vbm9kZV9tb2R1bGVzL3RvbmFsLWFycmF5L2J1aWxkL2VzNi5qcz82MWMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogWyFbbnBtIHZlcnNpb25dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL3YvdG9uYWwtYXJyYXkuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlKV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdG9uYWwtYXJyYXkpXG4gKlxuICogVG9uYWwgYXJyYXkgdXRpbGl0aWVzLiBDcmVhdGUgcmFuZ2VzLCBzb3J0IG5vdGVzLCAuLi5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0ICogYXMgQXJyYXk7XG4gKiBBcnJheS5zb3J0KFtcImZcIiwgXCJhXCIsIFwiY1wiXSkgLy8gPT4gW1wiQ1wiLCBcIkZcIiwgXCJBXCJdXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IEFycmF5ID0gcmVxdWlyZShcInRvbmFsLWFycmF5KVxuICogQXJyYXkucmFuZ2UoMSwgNCkgLy8gPT4gWzEsIDIsIDMsIDRdXG4gKlxuICogQG1vZHVsZSBBcnJheVxuICovXG5pbXBvcnQgeyBtaWRpLCBuYW1lIH0gZnJvbSBcInRvbmFsLW5vdGVcIjtcblxuLy8gYXNjZW5kaW5nIHJhbmdlXG5mdW5jdGlvbiBhc2NSKGIsIG4pIHtcbiAgZm9yICh2YXIgYSA9IFtdOyBuLS07IGFbbl0gPSBuICsgYil7IDsgfVxuICByZXR1cm4gYTtcbn1cbi8vIGRlc2NlbmRpbmcgcmFuZ2VcbmZ1bmN0aW9uIGRlc2NSKGIsIG4pIHtcbiAgZm9yICh2YXIgYSA9IFtdOyBuLS07IGFbbl0gPSBiIC0gbil7IDsgfVxuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBudW1lcmljIHJhbmdlXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGZyb21cbiAqIEBwYXJhbSB7TnVtYmVyfSB0b1xuICogQHJldHVybiB7QXJyYXl9XG4gKlxuICogQGV4YW1wbGVcbiAqIEFycmF5LnJhbmdlKC0yLCAyKSAvLyA9PiBbLTIsIC0xLCAwLCAxLCAyXVxuICogQXJyYXkucmFuZ2UoMiwgLTIpIC8vID0+IFsyLCAxLCAwLCAtMSwgLTJdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZShhLCBiKSB7XG4gIHJldHVybiBhID09PSBudWxsIHx8IGIgPT09IG51bGxcbiAgICA/IFtdXG4gICAgOiBhIDwgYiA/IGFzY1IoYSwgYiAtIGEgKyAxKSA6IGRlc2NSKGEsIGEgLSBiICsgMSk7XG59XG4vKipcbiAqXG4gKiBSb3RhdGVzIGEgbGlzdCBhIG51bWJlciBvZiB0aW1lcy4gSXRcInMgY29tcGxldGx5IGFnbm9zdGljIGFib3V0IHRoZVxuICogY29udGVudHMgb2YgdGhlIGxpc3QuXG4gKlxuICogQHBhcmFtIHtJbnRlZ2VyfSB0aW1lcyAtIHRoZSBudW1iZXIgb2Ygcm90YXRpb25zXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheVxuICogQHJldHVybiB7QXJyYXl9IHRoZSByb3RhdGVkIGFycmF5XG4gKiBAZXhhbXBsZVxuICogQXJyYXkucm90YXRlKDEsIFsxLCAyLCAzXSkgLy8gPT4gWzIsIDMsIDFdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUodGltZXMsIGFycikge1xuICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgdmFyIG4gPSAodGltZXMgJSBsZW4gKyBsZW4pICUgbGVuO1xuICByZXR1cm4gYXJyLnNsaWNlKG4sIGxlbikuY29uY2F0KGFyci5zbGljZSgwLCBuKSk7XG59XG5cbi8qKlxuICogUmV0dXJuIGEgY29weSBvZiB0aGUgYXJyYXkgd2l0aCB0aGUgbnVsbCB2YWx1ZXMgcmVtb3ZlZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheVxuICogQHJldHVybiB7QXJyYXl9XG4gKlxuICogQGV4YW1wbGVcbiAqIEFycmF5LmNvbXBhY3QoW1wiYVwiLCBcImJcIiwgbnVsbCwgXCJjXCJdKSAvLyA9PiBbXCJhXCIsIFwiYlwiLCBcImNcIl1cbiAqL1xuZXhwb3J0IHZhciBjb21wYWN0ID0gZnVuY3Rpb24gKGFycikgeyByZXR1cm4gYXJyLmZpbHRlcihmdW5jdGlvbiAobikgeyByZXR1cm4gbiA9PT0gMCB8fCBuOyB9KTsgfTtcblxuLy8gYSBmdW5jdGlvbiB0aGF0IGdldCBub3RlIGhlaWdodHMgKHdpdGggbmVnYXRpdmUgbnVtYmVyIGZvciBwaXRjaCBjbGFzc2VzKVxudmFyIGhlaWdodCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBtID0gbWlkaShuKTtcbiAgcmV0dXJuIG0gIT09IG51bGwgPyBtIDogbWlkaShuICsgXCItMTAwXCIpO1xufTtcblxuLyoqXG4gKiBTb3J0IGFuIGFycmF5IG9mIG5vdGVzIGluIGFzY2VuZGluZyBvcmRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBub3Rlc1xuICogQHJldHVybiB7QXJyYXl9IHNvcnRlZCBhcnJheSBvZiBub3Rlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc29ydChzcmMpIHtcbiAgcmV0dXJuIGNvbXBhY3Qoc3JjLm1hcChuYW1lKSkuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gaGVpZ2h0KGEpID4gaGVpZ2h0KGIpOyB9KTtcbn1cblxuLyoqXG4gKiBHZXQgc29ydGVkIG5vdGVzIHdpdGggZHVwbGljYXRlcyByZW1vdmVkXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fSBub3Rlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdW5pcXVlKGFycikge1xuICByZXR1cm4gc29ydChhcnIpLmZpbHRlcihmdW5jdGlvbiAobiwgaSwgYSkgeyByZXR1cm4gaSA9PT0gMCB8fCBuICE9PSBhW2kgLSAxXTsgfSk7XG59XG5cbi8qKlxuICogUmFuZG9taXplcyB0aGUgb3JkZXIgb2YgdGhlIHNwZWNpZmllZCBhcnJheSBpbi1wbGFjZSwgdXNpbmcgdGhlIEZpc2hlcuKAk1lhdGVzIHNodWZmbGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGFyciAtIHRoZSBhcnJheVxuICogQHJldHVybiB7QXJyYXl9IHRoZSBzaHVmZmxlZCBhcnJheVxuICpcbiAqIEBleGFtcGxlXG4gKiBBcnJheS5zaHVmZmxlKFtcIkNcIiwgXCJEXCIsIFwiRVwiLCBcIkZcIl0pXG4gKi9cbmV4cG9ydCB2YXIgc2h1ZmZsZSA9IGZ1bmN0aW9uIChhcnIsIHJuZCkge1xuICBpZiAoIHJuZCA9PT0gdm9pZCAwICkgcm5kID0gTWF0aC5yYW5kb207XG5cbiAgdmFyIGksIHQ7XG4gIHZhciBtID0gYXJyLmxlbmd0aDtcbiAgd2hpbGUgKG0pIHtcbiAgICBpID0gKHJuZCgpICogbS0tKSB8IDA7XG4gICAgdCA9IGFyclttXTtcbiAgICBhcnJbbV0gPSBhcnJbaV07XG4gICAgYXJyW2ldID0gdDtcbiAgfVxuICByZXR1cm4gYXJyO1xufTtcblxuLyoqXG4gKiBHZXQgYWxsIHBlcm11dGF0aW9ucyBvZiBhbiBhcnJheVxuICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85OTYwOTA4L3Blcm11dGF0aW9ucy1pbi1qYXZhc2NyaXB0XG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgLSB0aGUgYXJyYXlcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5Pn0gYW4gYXJyYXkgd2l0aCBhbGwgdGhlIHBlcm11dGF0aW9uc1xuICovXG5leHBvcnQgdmFyIHBlcm11dGF0aW9ucyA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgaWYgKGFyci5sZW5ndGggPT09IDApIHsgcmV0dXJuIFtbXV07IH1cbiAgcmV0dXJuIHBlcm11dGF0aW9ucyhhcnIuc2xpY2UoMSkpLnJlZHVjZShmdW5jdGlvbihhY2MsIHBlcm0pIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChcbiAgICAgIGFyci5tYXAoZnVuY3Rpb24oZSwgcG9zKSB7XG4gICAgICAgIHZhciBuZXdQZXJtID0gcGVybS5zbGljZSgpO1xuICAgICAgICBuZXdQZXJtLnNwbGljZShwb3MsIDAsIGFyclswXSk7XG4gICAgICAgIHJldHVybiBuZXdQZXJtO1xuICAgICAgfSlcbiAgICApO1xuICB9LCBbXSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/tonal-array/build/es6.js\n");

/***/ }),

/***/ "./node_modules/tonal-chord/build/es6.js":
/*!***********************************************!*\
  !*** ./node_modules/tonal-chord/build/es6.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   intervals: () => (/* binding */ intervals),\n/* harmony export */   names: () => (/* binding */ names),\n/* harmony export */   notes: () => (/* binding */ notes),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   subsets: () => (/* binding */ subsets),\n/* harmony export */   supersets: () => (/* binding */ supersets),\n/* harmony export */   tokenize: () => (/* binding */ tokenize)\n/* harmony export */ });\n/* harmony import */ var tonal_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tonal-note */ \"./node_modules/tonal-note/build/es6.js\");\n/* harmony import */ var tonal_distance__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tonal-distance */ \"./node_modules/tonal-distance/build/es6.js\");\n/* harmony import */ var tonal_dictionary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tonal-dictionary */ \"./node_modules/tonal-dictionary/build/es6.js\");\n/* harmony import */ var tonal_pcset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tonal-pcset */ \"./node_modules/tonal-pcset/build/es6.js\");\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-chord.svg)](https://www.npmjs.com/package/tonal-chord)\n * [![tonal](https://img.shields.io/badge/tonal-chord-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-chord` is a collection of functions to manipulate musical chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Chord from \"tonal-chord\"\n * // es5\n * const Chord = require(\"tonal-chord\")\n *\n * @example\n * Chord.notes(\"CMaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n *\n * @module Chord\n */\n\n\n\n\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * Chord.names() // => [\"maj7\", ...]\n */\nvar names = tonal_dictionary__WEBPACK_IMPORTED_MODULE_2__.chord.names;\n\nvar NO_CHORD = Object.freeze({\n  name: null,\n  names: [],\n  intervals: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = (0,tonal_dictionary__WEBPACK_IMPORTED_MODULE_2__.chord)(name);\n  if (!intervals) { return NO_CHORD; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = (0,tonal_pcset__WEBPACK_IMPORTED_MODULE_3__.chroma)(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = tonal_dictionary__WEBPACK_IMPORTED_MODULE_2__.chord.names(s.chroma);\n  return s;\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get chord properties. It returns an object with:\n *\n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n *\n * @function\n * @param {String} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nvar props = memo(properties);\n\n/**\n * Get chord intervals. It always returns an array\n *\n * @function\n * @param {String} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nvar intervals = function (name) { return props(tokenize(name)[1]).intervals; };\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: \"Cmaj7\") or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {String} nameOrTonic - name of the chord or the tonic (if the second parameter is present)\n * @param {String} [name] - (Optional) name if the first parameter is the tonic\n * @return {Array} an array of notes or an empty array\n *\n * @example\n * Chord.notes(\"Cmaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n * Chord.notes(\"C\", \"maj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n */\nfunction notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return props(name).intervals.map((0,tonal_distance__WEBPACK_IMPORTED_MODULE_1__.transpose)(p[0]));\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n *\n * @function\n * @param {String} name\n * @return {Boolean}\n * @example\n * Chord.exists(\"CMaj7\") // => true\n * Chord.exists(\"Maj7\") // => true\n * Chord.exists(\"Ablah\") // => false\n */\nvar exists = function (name) { return (0,tonal_dictionary__WEBPACK_IMPORTED_MODULE_2__.chord)(tokenize(name)[1]) !== undefined; };\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of chord names\n */\nvar supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = (0,tonal_pcset__WEBPACK_IMPORTED_MODULE_3__.isSupersetOf)(intervals(name));\n  return tonal_dictionary__WEBPACK_IMPORTED_MODULE_2__.chord.names().filter(function (name) { return isSuperset((0,tonal_dictionary__WEBPACK_IMPORTED_MODULE_2__.chord)(name)); });\n};\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of chord names\n */\nvar subsets = function (name) {\n  var isSubset = (0,tonal_pcset__WEBPACK_IMPORTED_MODULE_3__.isSubsetOf)(intervals(name));\n  return tonal_dictionary__WEBPACK_IMPORTED_MODULE_2__.chord.names().filter(function (name) { return isSubset((0,tonal_dictionary__WEBPACK_IMPORTED_MODULE_2__.chord)(name)); });\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nvar NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {String} name - the chord name\n * @return {Array} an array with [type, tonic]\n * @example\n * Chord.tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * Chord.tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * Chord.tokenize(\"mMaj7\") // => [ \"\", \"mMaj7\" ]\n * Chord.tokenize(\"Cnonsense\") // => [ \"C\", \"nonsense\" ]\n */\nfunction tokenize(name) {\n  var p = (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.tokenize)(name);\n  if (p[0] === \"\") { return [\"\", name]; }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (p[0] === \"A\" && p[3] === \"ug\") { return [\"\", \"aug\"]; }\n\n  if (NUM_TYPES.test(p[2])) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tonal-chord/build/es6.js\n");

/***/ }),

/***/ "./node_modules/tonal-dictionary/build/es6.js":
/*!****************************************************!*\
  !*** ./node_modules/tonal-dictionary/build/es6.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chord: () => (/* binding */ chord),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   dictionary: () => (/* binding */ dictionary),\n/* harmony export */   pcset: () => (/* binding */ pcset),\n/* harmony export */   scale: () => (/* binding */ scale)\n/* harmony export */ });\n/* harmony import */ var _data_scales_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data/scales.json */ \"./node_modules/tonal-dictionary/build/data/scales.json\");\n/* harmony import */ var _data_chords_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/chords.json */ \"./node_modules/tonal-dictionary/build/data/chords.json\");\n/* harmony import */ var tonal_pcset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tonal-pcset */ \"./node_modules/tonal-pcset/build/es6.js\");\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\n\n\n\n\nvar dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = (0,tonal_pcset__WEBPACK_IMPORTED_MODULE_2__.chroma)(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nvar combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {String} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nvar scale = dictionary(_data_scales_json__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {String} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nvar chord = dictionary(_data_chords_json__WEBPACK_IMPORTED_MODULE_1__);\nvar pcset = combine(scale, chord);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdG9uYWwtZGljdGlvbmFyeS9idWlsZC9lczYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDdUM7QUFDQTtBQUNGOztBQUU5QjtBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbURBQU07O0FBRXBCO0FBQ0EsaUJBQWlCLDZCQUE2QiwyQkFBMkI7QUFDekUsR0FBRztBQUNIOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBLGlDQUFpQztBQUNqQyxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVPO0FBQ1AsK0JBQStCO0FBQy9CLDhCQUE4QjtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ08sdUJBQXVCLDhDQUFLOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksT0FBTztBQUNuQjtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNPLHVCQUF1Qiw4Q0FBSztBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NsaC8uL25vZGVfbW9kdWxlcy90b25hbC1kaWN0aW9uYXJ5L2J1aWxkL2VzNi5qcz8zOTAxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogWyFbbnBtIHZlcnNpb25dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL3YvdG9uYWwtZGljdGlvbmFyeS5zdmcpXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS90b25hbC1kaWN0aW9uYXJ5KVxuICpcbiAqIGB0b25hbC1kaWN0aW9uYXJ5YCBjb250YWlucyBhIGRpY3Rpb25hcnkgb2YgbXVzaWNhbCBzY2FsZXMgYW5kIGNob3Jkc1xuICpcbiAqIFRoaXMgaXMgcGFydCBvZiBbdG9uYWxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RvbmFsKSBtdXNpYyB0aGVvcnkgbGlicmFyeS5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gZXM2XG4gKiBpbXBvcnQgKiBhcyBEaWN0aW9uYXJ5IGZyb20gXCJ0b25hbC1kaWN0aW9uYXJ5XCJcbiAqIC8vIGVzNVxuICogY29uc3QgRGljdGlvbmFyeSA9IHJlcXVpcmUoXCJ0b25hbC1kaWN0aW9uYXJ5XCIpXG4gKlxuICogQGV4YW1wbGVcbiAqIERpY3Rpb25hcnkuY2hvcmQoXCJNYWo3XCIpIC8vID0+IFtcIjFQXCIsIFwiM01cIiwgXCI1UFwiLCBcIjdNXCJdXG4gKlxuICogQG1vZHVsZSBEaWN0aW9uYXJ5XG4gKi9cbmltcG9ydCBzZGF0YSBmcm9tIFwiLi9kYXRhL3NjYWxlcy5qc29uXCI7XG5pbXBvcnQgY2RhdGEgZnJvbSBcIi4vZGF0YS9jaG9yZHMuanNvblwiO1xuaW1wb3J0IHsgY2hyb21hIH0gZnJvbSBcInRvbmFsLXBjc2V0XCI7XG5cbmV4cG9ydCB2YXIgZGljdGlvbmFyeSA9IGZ1bmN0aW9uIChyYXcpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyYXcpLnNvcnQoKTtcbiAgdmFyIGRhdGEgPSBbXTtcbiAgdmFyIGluZGV4ID0gW107XG5cbiAgdmFyIGFkZCA9IGZ1bmN0aW9uIChuYW1lLCBpdmxzLCBjaHJvbWEpIHtcbiAgICBkYXRhW25hbWVdID0gaXZscztcbiAgICBpbmRleFtjaHJvbWFdID0gaW5kZXhbY2hyb21hXSB8fCBbXTtcbiAgICBpbmRleFtjaHJvbWFdLnB1c2gobmFtZSk7XG4gIH07XG5cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaXZscyA9IHJhd1trZXldWzBdLnNwbGl0KFwiIFwiKTtcbiAgICB2YXIgYWxpYXMgPSByYXdba2V5XVsxXTtcbiAgICB2YXIgY2hyID0gY2hyb21hKGl2bHMpO1xuXG4gICAgYWRkKGtleSwgaXZscywgY2hyKTtcbiAgICBpZiAoYWxpYXMpIHsgYWxpYXMuZm9yRWFjaChmdW5jdGlvbiAoYSkgeyByZXR1cm4gYWRkKGEsIGl2bHMsIGNocik7IH0pOyB9XG4gIH0pO1xuICB2YXIgYWxsS2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpLnNvcnQoKTtcblxuICB2YXIgZGljdCA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBkYXRhW25hbWVdOyB9O1xuICBkaWN0Lm5hbWVzID0gZnVuY3Rpb24gKHApIHtcbiAgICBpZiAodHlwZW9mIHAgPT09IFwic3RyaW5nXCIpIHsgcmV0dXJuIChpbmRleFtwXSB8fCBbXSkuc2xpY2UoKTsgfVxuICAgIGVsc2UgeyByZXR1cm4gKHAgPT09IHRydWUgPyBhbGxLZXlzIDoga2V5cykuc2xpY2UoKTsgfVxuICB9O1xuICByZXR1cm4gZGljdDtcbn07XG5cbmV4cG9ydCB2YXIgY29tYmluZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBkaWN0ID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGEobmFtZSkgfHwgYihuYW1lKTsgfTtcbiAgZGljdC5uYW1lcyA9IGZ1bmN0aW9uIChwKSB7IHJldHVybiBhLm5hbWVzKHApLmNvbmNhdChiLm5hbWVzKHApKTsgfTtcbiAgcmV0dXJuIGRpY3Q7XG59O1xuXG4vKipcbiAqIEEgZGljdGlvbmFyeSBvZiBzY2FsZXM6IGEgZnVuY3Rpb24gdGhhdCBnaXZlbiBhIHNjYWxlIG5hbWUgKHdpdGhvdXQgdG9uaWMpXG4gKiByZXR1cm5zIGFuIGFycmF5IG9mIGludGVydmFsc1xuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0FycmF5fSBpbnRlcnZhbHNcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBzY2FsZSB9IGZyb20gXCJ0b25hbC1kaWN0aW9uYXJ5XCJcbiAqIHNjYWxlKFwibWFqb3JcIikgLy8gPT4gW1wiMVBcIiwgXCIyTVwiLCAuLi5dXG4gKiBzY2FsZS5uYW1lcygpOyAvLyA9PiBbXCJtYWpvclwiLCAuLi5dXG4gKi9cbmV4cG9ydCB2YXIgc2NhbGUgPSBkaWN0aW9uYXJ5KHNkYXRhKTtcblxuLyoqXG4gKiBBIGRpY3Rpb25hcnkgb2YgY2hvcmRzOiBhIGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gYSBjaG9yZCB0eXBlXG4gKiByZXR1cm5zIGFuIGFycmF5IG9mIGludGVydmFsc1xuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge0FycmF5fSBpbnRlcnZhbHNcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBjaG9yZCB9IGZyb20gXCJ0b25hbC1kaWN0aW9uYXJ5XCJcbiAqIGNob3JkKFwiTWFqN1wiKSAvLyA9PiBbXCIxUFwiLCBcIjNNXCIsIC4uLl1cbiAqIGNob3JkLm5hbWVzKCk7IC8vID0+IFtcIk1hajNcIiwgLi4uXVxuICovXG5leHBvcnQgdmFyIGNob3JkID0gZGljdGlvbmFyeShjZGF0YSk7XG5leHBvcnQgdmFyIHBjc2V0ID0gY29tYmluZShzY2FsZSwgY2hvcmQpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/tonal-dictionary/build/es6.js\n");

/***/ }),

/***/ "./node_modules/tonal-distance/build/es6.js":
/*!**************************************************!*\
  !*** ./node_modules/tonal-distance/build/es6.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   addIntervals: () => (/* binding */ addIntervals),\n/* harmony export */   fifths: () => (/* binding */ fifths),\n/* harmony export */   interval: () => (/* binding */ interval),\n/* harmony export */   semitones: () => (/* binding */ semitones),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   trFifths: () => (/* binding */ trFifths),\n/* harmony export */   transpose: () => (/* binding */ transpose),\n/* harmony export */   transposeBy: () => (/* binding */ transposeBy)\n/* harmony export */ });\n/* harmony import */ var tonal_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tonal-note */ \"./node_modules/tonal-note/build/es6.js\");\n/* harmony import */ var tonal_interval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tonal-interval */ \"./node_modules/tonal-interval/build/es6.js\");\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-distance.svg)](https://www.npmjs.com/package/tonal-distance)\n * [![tonal](https://img.shields.io/badge/tonal-distance-yellow.svg)](https://github.com/danigb/tonal/tree/master/packages/tonal/distance)\n *\n * Transpose notes by intervals and find distances between notes\n *\n * @example\n * // es6\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"C3\", \"C4\") // => \"1P\"\n *\n * @example\n * // es6 import selected functions\n * import { interval, semitones, transpose } from \"tonal-distance\"\n *\n * semitones(\"C\" ,\"D\") // => 2\n * interval(\"C4\", \"G4\") // => \"5P\"\n * transpose(\"C4\", \"P5\") // => \"G4\"\n *\n * @example\n * // included in tonal facade\n * const Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(\"C4\", \"P5\")\n * Tonal.Distance.transposeBy(\"P5\", \"C4\")\n *\n * @module Distance\n */\n\n\n\n// Map from letter step to number of fifths starting from \"C\":\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nvar fOcts = function (f) { return Math.floor(f * 7 / 12); };\n\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\n\nvar encode = function (ref) {\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var dir = ref.dir; if ( dir === void 0 ) dir = 1;\n\n  var f = FIFTHS[step] + 7 * alt;\n  if (oct === null) { return [dir * f]; }\n  var o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar decode = function (f, o, dir) {\n  var step = STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n  if (o === undefined) { return { step: step, alt: alt, dir: dir }; }\n  var oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step: step, alt: alt, oct: oct, dir: dir };\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\nvar encoder = function (props) { return memo(function (str) {\n    var p = props(str);\n    return p.name === null ? null : encode(p);\n  }); };\n\nvar encodeNote = encoder(tonal_note__WEBPACK_IMPORTED_MODULE_0__.props);\nvar encodeIvl = encoder(tonal_interval__WEBPACK_IMPORTED_MODULE_1__.props);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n *\n * This function can be partially applied.\n *\n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranpose } from \"tonal-distance\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * // it works with pitch classes\n * transpose(\"D\", \"3M\") // => \"F#\"\n * // can be partially applied\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(transpose(\"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nfunction transpose(note, interval) {\n  if (arguments.length === 1) { return function (i) { return transpose(note, i); }; }\n  var n = encodeNote(note);\n  var i = encodeIvl(interval);\n  if (n === null || i === null) { return null; }\n  var tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.build)(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths.\n *\n * It can be partially applied.\n *\n * @function\n * @param {String} pitchClass - the pitch class\n * @param {Integer} fifhts - the number of fifths\n * @return {String} the transposed pitch class\n *\n * @example\n * import { trFifths } from \"tonal-transpose\"\n * [0, 1, 2, 3, 4].map(trFifths(\"C\")) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n * // or using tonal\n * Distance.trFifths(\"G4\", 1) // => \"D\"\n */\n\nfunction trFifths(note, fifths) {\n  if (arguments.length === 1) { return function (f) { return trFifths(note, f); }; }\n  var n = encodeNote(note);\n  if (n === null) { return null; }\n  return (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.build)(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n *\n * Can be partially applied.\n *\n * @param {String} to - note or pitch class\n * @param {String} from - note or pitch class\n */\nfunction fifths(from, to) {\n  if (arguments.length === 1) { return function (to) { return fifths(from, to); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (t === null || f === null) { return null; }\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n *\n * Can be partially applied.\n *\n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranposeBy } from \"tonal-distance\"\n * transposeBy(\"3m\", \"5P\") // => \"7m\"\n */\nfunction transposeBy(interval, note) {\n  if (arguments.length === 1) { return function (n) { return transpose(n, interval); }; }\n  return transpose(note, interval);\n}\n\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\nvar decodeIvl = function (i) { return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1); };\n\nfunction addIntervals(ivl1, ivl2, dir) {\n  var i1 = encodeIvl(ivl1);\n  var i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) { return null; }\n  var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return (0,tonal_interval__WEBPACK_IMPORTED_MODULE_1__.build)(decodeIvl(i));\n}\n\n/**\n * Add two intervals\n *\n * Can be partially applied.\n *\n * @param {String} interval1\n * @param {String} interval2\n * @return {String} the resulting interval\n * @example\n * import { add } from \"tonal-distance\"\n * add(\"3m\", \"5P\") // => \"7m\"\n */\nfunction add(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n *\n * Can be partially applied\n *\n * @param {String} minuend\n * @param {String} subtrahend\n * @return {String} interval diference\n */\nfunction subtract(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes\n * (both must be pitch classes and the interval is always ascending)\n *\n * Can be partially applied\n *\n * @param {String} from - distance from\n * @param {String} to - distance to\n * @return {String} the interval distance\n *\n * @example\n * import { interval } from \"tonal-distance\"\n * interval(\"C2\", \"C3\") // => \"P8\"\n * interval(\"G\", \"B\") // => \"M3\"\n *\n * @example\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"M2\", \"P5\") // => \"P4\"\n */\nfunction interval(from, to) {\n  if (arguments.length === 1) { return function (t) { return interval(from, t); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) { return null; }\n  var d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor((t[0] - f[0]) * 7 / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return (0,tonal_interval__WEBPACK_IMPORTED_MODULE_1__.build)(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n *\n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from \"tonal-distance\"\n * semitones(\"C3\", \"A2\") // => -3\n * // or use tonal\n * Tonal.Distance.semitones(\"C3\", \"G3\") // => 7\n */\nfunction semitones(from, to) {\n  if (arguments.length === 1) { return function (t) { return semitones(from, t); }; }\n  var f = (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.props)(from);\n  var t = (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.props)(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n      ? (t.chroma - f.chroma + 12) % 12\n      : null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tonal-distance/build/es6.js\n");

/***/ }),

/***/ "./node_modules/tonal-interval/build/es6.js":
/*!**************************************************!*\
  !*** ./node_modules/tonal-interval/build/es6.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   build: () => (/* binding */ build),\n/* harmony export */   chroma: () => (/* binding */ chroma),\n/* harmony export */   fromSemitones: () => (/* binding */ fromSemitones),\n/* harmony export */   ic: () => (/* binding */ ic),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   names: () => (/* binding */ names),\n/* harmony export */   num: () => (/* binding */ num),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   semitones: () => (/* binding */ semitones),\n/* harmony export */   simplify: () => (/* binding */ simplify),\n/* harmony export */   tokenize: () => (/* binding */ tokenize)\n/* harmony export */ });\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-interval.svg)](https://www.npmjs.com/package/tonal-interval)\n * [![tonal](https://img.shields.io/badge/tonal-interval-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-interval` is a collection of functions to create and manipulate music intervals.\n *\n * The intervals are strings in shorthand notation. Two variations are supported:\n *\n * - standard shorthand notation: type and number, for example: \"M3\", \"d-4\"\n * - inverse shorthand notation: number and then type, for example: \"3M\", \"-4d\"\n *\n * The problem with the standard shorthand notation is that some strings can be\n * parsed as notes or intervals, for example: \"A4\" can be note A in 4th octave\n * or an augmented four. To remove ambiguity, the prefered notation in tonal is the\n * inverse shortand notation.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * // es6\n * import * as Interval from \"tonal-interval\"\n * // es5\n * const Interval = require(\"tonal-interval\")\n * // part of tonal\n * import { Interval } from \"tonal\"\n *\n * Interval.semitones(\"4P\") // => 5\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.simplify(\"9m\") // => \"2m\"\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-interval](https://nodei.co/npm/tonal-interval.png?mini=true)](https://npmjs.org/package/tonal-interval/)\n *\n * ## API Documentation\n *\n * @module Interval\n */\n// shorthand tonal notation (with quality after number)\nvar IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\nvar TYPES = \"PMMPPMM\";\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\n\n/**\n * List basic (perfect, major, minor) interval names within a octave\n * @param {String} qualities - (Optional, default \"PMm\") the valid types\n * @return {Array} the interval names\n * @example\n * Interval.names() // => [ \"1P\", \"2m\", \"2M\", \"3m\", \"3M\", \"4P\", \"5P\", \"6m\", \"6M\", \"7m\", \"7M\", \"8P\" ]\n * Interval.names(\"P\") // => [ \"1P\", \"4P\", \"5P\", \"8P\" ]\n * Interval.names(\"PM\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n * Interval.names(\"Pm\") // => [ \"1P\", \"2m\", \"3m\", \"4P\", \"5P\", \"6m\", \"7m\", \"8P\" ]\n * Interval.names(\"d\") // => []\n */\nvar names = function (types) { return typeof types !== \"string\"\n    ? NAMES.slice()\n    : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; }); };\n\nvar tokenize = function (str) {\n  var m = REGEX.exec(str);\n  return m === null ? null : m[1] ? [m[1], m[2]] : [m[4], m[3]];\n};\n\nvar NO_IVL = Object.freeze({\n  name: null,\n  num: null,\n  q: null,\n  step: null,\n  alt: null,\n  dir: null,\n  type: null,\n  simple: null,\n  semitones: null,\n  chroma: null\n});\n\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\n\nvar qToAlt = function (type, q) {\n  if (q === \"M\" && type === \"M\") { return 0; }\n  if (q === \"P\" && type === \"P\") { return 0; }\n  if (q === \"m\" && type === \"M\") { return -1; }\n  if (/^A+$/.test(q)) { return q.length; }\n  if (/^d+$/.test(q)) { return type === \"P\" ? -q.length : -q.length - 1; }\n  return null;\n};\n\nvar altToQ = function (type, alt) {\n  if (alt === 0) { return type === \"M\" ? \"M\" : \"P\"; }\n  else if (alt === -1 && type === \"M\") { return \"m\"; }\n  else if (alt > 0) { return fillStr(\"A\", alt); }\n  else if (alt < 0) { return fillStr(\"d\", type === \"P\" ? alt : alt + 1); }\n  else { return null; }\n};\n\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\n\nvar properties = function (str) {\n  var t = tokenize(str);\n  if (t === null) { return NO_IVL; }\n  var p = { num: +t[0], q: t[1] };\n  p.step = numToStep(p.num);\n  p.type = TYPES[p.step];\n  if (p.type === \"M\" && p.q === \"P\") { return NO_IVL; }\n\n  p.name = \"\" + p.num + p.q;\n  p.dir = p.num < 0 ? -1 : 1;\n  p.simple = p.num === 8 || p.num === -8 ? p.num : p.dir * (p.step + 1);\n  p.alt = qToAlt(p.type, p.q);\n  p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\n  p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\n  p.chroma = ((p.dir * (SIZES[p.step] + p.alt)) % 12 + 12) % 12;\n  return Object.freeze(p);\n};\n\nvar cache = {};\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: name\n * - num: number\n * - q: quality\n * - step: step\n * - alt: alteration\n * - dir: direction (1 ascending, -1 descending)\n * - type: \"P\" or \"M\" for perfectable or majorable\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n * - ic: the interval class\n *\n * @function\n * @param {String} interval - the interval\n * @return {Object} the interval in the form [number, alt]\n */\nfunction props(str) {\n  if (typeof str !== \"string\") { return NO_IVL; }\n  return cache[str] || (cache[str] = properties(str));\n}\n\n/**\n * Get the number of the interval\n *\n * @function\n * @param {String} interval - the interval\n * @return {Integer}\n * @example\n * Interval.num(\"m2\") // => 2\n * Interval.num(\"P9\") // => 9\n * Interval.num(\"P-4\") // => -4\n */\nvar num = function (str) { return props(str).num; };\n\n/**\n * Get interval name. Can be used to test if it\"s an interval. It accepts intervals\n * as pitch or string in shorthand notation or tonal notation. It returns always\n * intervals in tonal notation.\n *\n * @function\n * @param {String} interval - the interval string or array\n * @return {String} the interval name or null if not valid interval\n * @example\n * Interval.name(\"m-3\") // => \"-3m\"\n * Interval.name(\"3\") // => null\n */\nvar name = function (str) { return props(str).name; };\n\n/**\n * Get size in semitones of an interval\n *\n * @function\n * @param {String} ivl\n * @return {Integer} the number of semitones or null if not an interval\n * @example\n * import { semitones } from \"tonal-interval\"\n * semitones(\"P4\") // => 5\n * // or using tonal\n * Tonal.Interval.semitones(\"P5\") // => 7\n */\nvar semitones = function (str) { return props(str).semitones; };\n\n/**\n * Get the chroma of the interval. The chroma is a number between 0 and 7\n * that represents the position within an octave (pitch set)\n *\n * @function\n * @param {String} str\n * @return {Number}\n */\nvar chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the [interval class](https://en.wikipedia.org/wiki/Interval_class)\n * number of a given interval.\n *\n * In musical set theory, an interval class is the shortest distance in\n * pitch class space between two unordered pitch classes\n *\n * @function\n * @param {String|Integer} interval - the interval or the number of semitones\n * @return {Integer} A value between 0 and 6\n *\n * @example\n * Interval.ic(\"P8\") // => 0\n * Interval.ic(\"m6\") // => 4\n * Interval.ic(10) // => 2\n * [\"P1\", \"M2\", \"M3\", \"P4\", \"P5\", \"M6\", \"M7\"].map(ic) // => [0, 2, 4, 5, 5, 3, 1]\n */\nvar ic = function (ivl) {\n  if (typeof ivl === \"string\") { ivl = props(ivl).chroma; }\n  return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\n};\n\n/**\n * Given a interval property object, get the interval name\n *\n * The properties must contain a `num` *or* `step`, and `alt`:\n *\n * - num: the interval number\n * - step: the interval step (overrides the num property)\n * - alt: the interval alteration\n * - oct: (Optional) the number of octaves\n * - dir: (Optional) the direction\n *\n * @function\n * @param {Object} props - the interval property object\n *\n * @return {String} the interval name\n * @example\n * Interval.build({ step: 1, alt: -1, oct: 0, dir: 1 }) // => \"1d\"\n * Interval.build({ num: 9, alt: -1 }) // => \"9m\"\n */\nvar build = function (ref) {\n  if ( ref === void 0 ) ref = {};\n  var num = ref.num;\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct; if ( oct === void 0 ) oct = 1;\n  var dir = ref.dir;\n\n  if (step !== undefined) { num = step + 1 + 7 * oct; }\n  if (num === undefined) { return null; }\n\n  var d = dir < 0 ? \"-\" : \"\";\n  var type = TYPES[numToStep(num)];\n  return d + num + altToQ(type, alt);\n};\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {String} interval - the interval to simplify\n * @return {String} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n */\nvar simplify = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  return p.simple + p.q;\n};\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {String} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {String} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nvar invert = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  var step = (7 - p.step) % 7;\n  var alt = p.type === \"P\" ? -p.alt : -(p.alt + 1);\n  return build({ step: step, alt: alt, oct: p.oct, dir: p.dir });\n};\n\n// interval numbers\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it\"s arbitraty, but deterministic.\n *\n * @function\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {String} the interval name\n * @example\n * import { fromSemitones } from \"tonal-interval\"\n * fromSemitones(7) // => \"5P\"\n * // or using tonal\n * Tonal.Distance.fromSemitones(-7) // => \"-5P\"\n */\nvar fromSemitones = function (num) {\n  var d = num < 0 ? -1 : 1;\n  var n = Math.abs(num);\n  var c = n % 12;\n  var o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tonal-interval/build/es6.js\n");

/***/ }),

/***/ "./node_modules/tonal-key/build/es6.js":
/*!*********************************************!*\
  !*** ./node_modules/tonal-key/build/es6.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alteredNotes: () => (/* binding */ alteredNotes),\n/* harmony export */   chords: () => (/* binding */ chords),\n/* harmony export */   degrees: () => (/* binding */ degrees),\n/* harmony export */   fromAlter: () => (/* binding */ fromAlter),\n/* harmony export */   modeNames: () => (/* binding */ modeNames),\n/* harmony export */   names: () => (/* binding */ names),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   relative: () => (/* binding */ relative),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   secDomChords: () => (/* binding */ secDomChords),\n/* harmony export */   tokenize: () => (/* binding */ tokenize)\n/* harmony export */ });\n/* harmony import */ var tonal_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tonal-array */ \"./node_modules/tonal-array/build/es6.js\");\n/* harmony import */ var tonal_note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tonal-note */ \"./node_modules/tonal-note/build/es6.js\");\n/* harmony import */ var tonal_distance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tonal-distance */ \"./node_modules/tonal-distance/build/es6.js\");\n\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-Key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n * [![tonal](https://img.shields.io/badge/tonal-key-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-key` is a collection of functions to query about tonal keys.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Key from \"tonal-key\"\n * // es5\n * const Key = require(\"tonal-key\")\n *\n * @example\n * Key.scale(\"E mixolydian\") // => [ \"E\", \"F#\", \"G#\", \"A\", \"B\", \"C#\", \"D\" ]\n * Key.relative(\"minor\", \"C major\") // => \"A minor\"\n *\n * @module Key\n */\n\n\n\n\nvar MODES = \"major dorian phrygian lydian mixolydian minor locrian ionian aeolian\".split(\n  \" \"\n);\nvar NUMS = [0, 1, 2, 3, 4, 5, 6, 0, 5];\nvar NOTES = \"C D E F G A B\".split(\" \");\nvar CHORDS = \"Maj7 m7 m7 Maj7 7 m7 m7b5\".split(\" \");\nvar DEGREES = \"I II III IV V VI VII\".split(\" \");\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5, 0, 3];\n\nvar modenum = function (mode) { return NUMS[MODES.indexOf(mode)]; };\n\n/**\n * Get a list of valid mode names. The list of modes will be always in\n * increasing order (ionian to locrian)\n *\n * @function\n * @param {Boolean} alias - true to get aliases names\n * @return {Array} an array of strings\n * @example\n * Key.modes() // => [ \"ionian\", \"dorian\", \"phrygian\", \"lydian\",\n * // \"mixolydian\", \"aeolian\", \"locrian\" ]\n * Key.modes(true) // => [ \"ionian\", \"dorian\", \"phrygian\", \"lydian\",\n * // \"mixolydian\", \"aeolian\", \"locrian\", \"major\", \"minor\" ]\n */\nvar modeNames = function (aliases) { return aliases === true ? MODES.slice() : MODES.slice(0, 7); };\n\n/**\n * Create a major key from alterations\n *\n * @function\n * @param {Integer} alt - the alteration number (positive sharps, negative flats)\n * @return {Key} the key object\n * @example\n * Key.fromAlter(2) // => \"D major\"\n */\nvar fromAlter = function (i) { return (0,tonal_distance__WEBPACK_IMPORTED_MODULE_2__.trFifths)(\"C\", i) + \" major\"; };\n\nvar names = function (alt) {\n  if ( alt === void 0 ) alt = 4;\n\n  alt = Math.abs(alt);\n  var result = [];\n  for (var i = -alt; i <= alt; i++) { result.push(fromAlter(i)); }\n  return result;\n};\n\nvar NO_KEY = Object.freeze({\n  name: null,\n  tonic: null,\n  mode: null,\n  modenum: null,\n  intervals: [],\n  scale: [],\n  alt: null,\n  acc: null\n});\n\nvar properties = function (name) {\n  var p = tokenize(name);\n  if (p[0] === null) { return NO_KEY; }\n  var k = { tonic: p[0], mode: p[1] };\n  k.name = k.tonic + \" \" + k.mode;\n  k.modenum = modenum(k.mode);\n  var cs = (0,tonal_array__WEBPACK_IMPORTED_MODULE_0__.rotate)(k.modenum, NOTES);\n  k.alt = (0,tonal_distance__WEBPACK_IMPORTED_MODULE_2__.fifths)(\"C\", k.tonic) - FIFTHS[MODES.indexOf(k.mode)];\n  k.acc = (0,tonal_note__WEBPACK_IMPORTED_MODULE_1__.altToAcc)(k.alt);\n  k.intervals = cs.map((0,tonal_distance__WEBPACK_IMPORTED_MODULE_2__.interval)(cs[0]));\n  k.scale = k.intervals.map((0,tonal_distance__WEBPACK_IMPORTED_MODULE_2__.transpose)(k.tonic));\n  return Object.freeze(k);\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Return the a key properties object with the following information:\n *\n * - name {String}: name\n * - tonic {String}: key tonic\n * - mode {String}: key mode\n * - modenum {Number}: mode number (0 major, 1 dorian, ...)\n * - intervals {Array}: the scale intervals\n * - scale {Array}: the scale notes\n * - acc {String}: accidentals of the key signature\n * - alt {Number}: alteration number (a numeric representation of accidentals)\n *\n * @function\n * @param {String} name - the key name\n * @return {Object} the key properties object or null if not a valid key\n *\n * @example\n * Key.props(\"C3 dorian\") // => { tonic: \"C\", mode: \"dorian\", ... }\n */\nvar props = memo(properties);\n\n/**\n * Get scale of a key\n *\n * @function\n * @param {String|Object} key\n * @return {Array} the key scale\n *\n * @example\n * Key.scale(\"A major\") // => [ \"A\", \"B\", \"C#\", \"D\", \"E\", \"F#\", \"G#\" ]\n * Key.scale(\"Bb minor\") // => [ \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"Ab\" ]\n * Key.scale(\"C dorian\") // => [ \"C\", \"D\", \"Eb\", \"F\", \"G\", \"A\", \"Bb\" ]\n * Key.scale(\"E mixolydian\") // => [ \"E\", \"F#\", \"G#\", \"A\", \"B\", \"C#\", \"D\" ]\n */\nvar scale = function (str) { return props(str).scale; };\n\n/**\n * Get a list of key scale degrees\n * @param {String} keyName\n * @return {Array}\n * @example\n * Key.degrees(\"C major\") => [\"I\", \"ii\", \"iii\", \"IV\", \"V\", \"vi\", \"vii\"]\n */\nvar degrees = function (str) {\n  var p = props(str);\n  if (p.name === null) { return []; }\n  var chords = (0,tonal_array__WEBPACK_IMPORTED_MODULE_0__.rotate)(p.modenum, CHORDS);\n  return chords.map(function (chord, i) {\n    var deg = DEGREES[i];\n    return chord[0] === \"m\" ? deg.toLowerCase() : deg;\n  });\n};\n\n/**\n * Get a list of the altered notes of a given Key. The notes will be in\n * the same order than in the key signature.\n *\n * @function\n * @param {String} key - the key name\n * @return {Array}\n *\n * @example\n * Key.alteredNotes(\"Eb major\") // => [ \"Bb\", \"Eb\", \"Ab\" ]\n */\nvar alteredNotes = function (name) {\n  var alt = props(name).alt;\n  if (alt === null) { return null; }\n  return alt === 0\n    ? []\n    : alt > 0\n      ? (0,tonal_array__WEBPACK_IMPORTED_MODULE_0__.range)(1, alt).map((0,tonal_distance__WEBPACK_IMPORTED_MODULE_2__.trFifths)(\"B\"))\n      : (0,tonal_array__WEBPACK_IMPORTED_MODULE_0__.range)(-1, alt).map((0,tonal_distance__WEBPACK_IMPORTED_MODULE_2__.trFifths)(\"F\"));\n};\n\n/**\n * Get key chords\n *\n * @function\n * @param {String} name - the key name\n * @return {Array}\n *\n * @example\n * Key.chords(\"A major\") // => [\"AMaj7\", \"Bm7\", \"C#m7\", \"DMaj7\", ..,]\n */\nvar chords = function (str) {\n  var p = props(str);\n  if (!p.name) { return []; }\n  var chords = (0,tonal_array__WEBPACK_IMPORTED_MODULE_0__.rotate)(p.modenum, CHORDS);\n  return p.scale.map(function (tonic, i) { return tonic + chords[i]; });\n};\n\n/**\n * Get secondary dominant key chords\n *\n * @function\n * @param {String} name - the key name\n * @return {Array}\n *\n * @example\n * Key.secDomChords(\"A major\") // => [\"E7\", \"F#7\", ...]\n */\n\nvar secDomChords = function (name) {\n  var p = props(name);\n  if (!p.name) { return []; }\n  return p.scale.map(function (t) { return (0,tonal_distance__WEBPACK_IMPORTED_MODULE_2__.transpose)(t, \"P5\") + \"7\"; });\n};\n\n/**\n * Get relative of a key. Two keys are relative when the have the same\n * key signature (for example C major and A minor)\n *\n * It can be partially applied.\n *\n * @function\n * @param {String} mode - the relative destination\n * @param {String} key - the key source\n *\n * @example\n * Key.relative(\"dorian\", \"B major\") // => \"C# dorian\"\n * // partial application\n * var minor = Key.relative(\"minor\")\n * minor(\"C major\") // => \"A minor\"\n * minor(\"E major\") // => \"C# minor\"\n */\nvar relative = function (mode, key) {\n  if (arguments$1.length === 1) { return function (key) { return relative(mode, key); }; }\n  var num = modenum(mode.toLowerCase());\n  if (num === undefined) { return null; }\n  var k = props(key);\n  if (k.name === null) { return null; }\n  return (0,tonal_distance__WEBPACK_IMPORTED_MODULE_2__.trFifths)(k.tonic, FIFTHS[num] - FIFTHS[k.modenum]) + \" \" + mode;\n};\n\n/**\n * Split the key name into its components (pitch class tonic and mode name)\n *\n * @function\n * @param {String} name\n * @return {Array} an array in the form [tonic, key]\n *\n * @example\n * Key.tokenize(\"C major\") // => [\"C\", \"major\"]\n */\nvar tokenize = function (name) {\n  var p = (0,tonal_note__WEBPACK_IMPORTED_MODULE_1__.tokenize)(name);\n  p[3] = p[3].toLowerCase();\n  if (p[0] === \"\" || MODES.indexOf(p[3]) === -1) { return [null, null]; }\n  return [p[0] + p[1], p[3]];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tonal-key/build/es6.js\n");

/***/ }),

/***/ "./node_modules/tonal-note/build/es6.js":
/*!**********************************************!*\
  !*** ./node_modules/tonal-note/build/es6.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   altToAcc: () => (/* binding */ altToAcc),\n/* harmony export */   build: () => (/* binding */ build),\n/* harmony export */   chroma: () => (/* binding */ chroma),\n/* harmony export */   enharmonic: () => (/* binding */ enharmonic),\n/* harmony export */   freq: () => (/* binding */ freq),\n/* harmony export */   freqToMidi: () => (/* binding */ freqToMidi),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromMidi: () => (/* binding */ fromMidi),\n/* harmony export */   midi: () => (/* binding */ midi),\n/* harmony export */   midiToFreq: () => (/* binding */ midiToFreq),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   names: () => (/* binding */ names),\n/* harmony export */   oct: () => (/* binding */ oct),\n/* harmony export */   pc: () => (/* binding */ pc),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   simplify: () => (/* binding */ simplify),\n/* harmony export */   stepToLetter: () => (/* binding */ stepToLetter),\n/* harmony export */   tokenize: () => (/* binding */ tokenize)\n/* harmony export */ });\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-note.svg)](https://www.npmjs.com/package/tonal-note)\n * [![tonal](https://img.shields.io/badge/tonal-note-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-note` is a collection of functions to manipulate musical notes in scientific notation\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * import * as Note from \"tonal-note\"\n * // or const Note = require(\"tonal-note\")\n * Note.name(\"bb2\") // => \"Bb2\"\n * Note.chroma(\"bb2\") // => 10\n * Note.midi(\"a4\") // => 69\n * Note.freq(\"a4\") // => 440\n * Note.oct(\"G3\") // => 3\n *\n * // part of tonal\n * const Tonal = require(\"tonal\")\n * // or import Note from \"tonal\"\n * Tonal.Note.midi(\"d4\") // => 62\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-note](https://nodei.co/npm/tonal-note.png?mini=true)](https://npmjs.org/package/tonal-note/)\n *\n * ## API Documentation\n *\n * @module Note\n */\n\nvar NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\n\n/**\n * Get a list of note names (pitch classes) within a octave\n *\n * @param {string} accTypes - (Optional, by default \" b#\"). A string with the\n * accidentals types: \" \" means no accidental, \"#\" means sharps, \"b\" mean flats,\n * can be conbined (see examples)\n * @return {Array}\n * @example\n * Note.names(\" b\") // => [ \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\" ]\n * Note.names(\" #\") // => [ \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\" ]\n */\nvar names = function (accTypes) { return typeof accTypes !== \"string\"\n    ? NAMES.slice()\n    : NAMES.filter(function (n) {\n        var acc = n[1] || \" \";\n        return accTypes.indexOf(acc) !== -1;\n      }); };\n\nvar SHARPS = names(\" #\");\nvar FLATS = names(\" b\");\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * Split a string into tokens related to note parts.\n * It returns an array of strings `[letter, accidental, octave, modifier]`\n *\n * It always returns an array\n *\n * @param {String} str\n * @return {Array} an array of note tokens\n * @example\n * Note.tokenize(\"C#2\") // => [\"C\", \"#\", \"2\", \"\"]\n * Note.tokenize(\"Db3 major\") // => [\"D\", \"b\", \"3\", \"major\"]\n * Note.tokenize(\"major\") // => [\"\", \"\", \"\", \"major\"]\n * Note.tokenize(\"##\") // => [\"\", \"##\", \"\", \"\"]\n * Note.tokenize() // => [\"\", \"\", \"\", \"\"]\n */\nfunction tokenize(str) {\n  if (typeof str !== \"string\") { str = \"\"; }\n  var m = REGEX.exec(str);\n  if (!m) { return null; }\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n\nvar NO_NOTE = Object.freeze({\n  pc: null,\n  name: null,\n  step: null,\n  alt: null,\n  oct: null,\n  octStr: null,\n  chroma: null,\n  midi: null,\n  freq: null\n});\n\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\nvar properties = function (str) {\n  var tokens = tokenize(str);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") { return NO_NOTE; }\n  var letter = tokens[0];\n  var acc = tokens[1];\n  var octStr = tokens[2];\n  var p = { letter: letter, acc: acc, octStr: octStr };\n  p.pc = p.letter + p.acc;\n  p.name = p.pc + octStr;\n  p.step = (p.letter.charCodeAt(0) + 3) % 7;\n  p.alt = p.acc[0] === \"b\" ? -p.acc.length : p.acc.length;\n  p.oct = octStr.length ? +octStr : null;\n  p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\n  p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\n  p.freq = midiToFreq(p.midi);\n  return Object.freeze(p);\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get note properties. It returns an object with the following information:\n *\n * - nameÂ {String}: the note name. The letter is always in uppercase\n * - letter {String}: the note letter, always in uppercase\n * - acc {String}: the note accidentals\n * - octave {Number}: the octave or null if not present\n * - pcÂ {String}: the pitch class (letter + accidentals)\n * - step {Number}: number equivalent of the note letter. 0 means C ... 6 means B.\n * - alt {Number}: number equivalent of accidentals (negative are flats, positive sharps)\n * - chroma {Number}: number equivalent of the pitch class, where 0 is C, 1 is C# or Db, 2 is D...\n * - midi {Number}: the note midi number\n * - freq {Number}: the frequency using an equal temperament at 440Hz\n *\n * This function *always* returns an object with all this properties, but if it\"s\n * not a valid note all properties will be null.\n *\n * The returned object can\"t be mutated.\n *\n * @param {String} note - the note name in scientific notation\n * @return {Object} an object with the properties (or an object will all properties\n * set to null if not valid note)\n * @example\n * Note.props(\"fx-3\").name // => \"F##-3\"\n * Note.props(\"invalid\").name // => null\n * Note.props(\"C#3\").oct // => 3\n * Note.props().oct // => null\n */\nvar props = memo(properties);\n\n/**\n * Given a note name, return the note name or null if not valid note.\n * The note name will ALWAYS have the letter in upercase and accidentals\n * using # or b\n *\n * Can be used to test if a string is a valid note name.\n *\n * @function\n * @param {Pitch|string}\n * @return {string}\n *\n * @example\n * Note.name(\"cb2\") // => \"Cb2\"\n * [\"c\", \"db3\", \"2\", \"g+\", \"gx4\"].map(Note.name) // => [\"C\", \"Db3\", null, null, \"G##4\"]\n */\nvar name = function (str) { return props(str).name; };\n\n/**\n * Get pitch class of a note. The note can be a string or a pitch array.\n *\n * @function\n * @param {string|Pitch}\n * @return {string} the pitch class\n * @example\n * Note.pc(\"Db3\") // => \"Db\"\n * [\"db3\", \"bb6\", \"fx2\"].map(Note.pc) // => [ \"Db\", \"Bb\", \"F##\"]\n */\nvar pc = function (str) { return props(str).pc; };\n\n/**\n * Get the note midi number\n * (an alias of tonal-midi `toMidi` function)\n *\n * @function\n * @param {string|Number} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * Note.midi(\"C4\") // => 60\n * Note.midi(60) // => 60\n * @see midi.toMidi\n */\nvar midi = function (note) { return props(note).midi || +note || null; };\n\n/**\n * Get the frequency from midi number\n *\n * @param {Number} midi - the note midi number\n * @param {Number} tuning - (Optional) 440 by default\n * @return {Number} the frequency or null if not valid note midi\n */\nvar midiToFreq = function (midi, tuning) {\n    if ( tuning === void 0 ) tuning = 440;\n\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\n};\n\n/**\n * Get the frequency of a note\n *\n * @function\n * @param {string|Number} note - the note name or midi note number\n * @return {Number} the frequency\n * @example\n * Note.freq(\"A4\") // => 440\n * Note.freq(69) // => 440\n */\nvar freq = function (note) { return props(note).freq || midiToFreq(note); };\n\nvar L2 = Math.log(2);\nvar L440 = Math.log(440);\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precission)\n *\n * @param {Number} frequency\n * @return {Number}\n * @example\n * Note.freqToMidi(220)); //=> 57;\n * Note.freqToMidi(261.62)); //=> 60;\n * Note.freqToMidi(261)); //=> 59.96;\n */\nvar freqToMidi = function (freq) {\n  var v = 12 * (Math.log(freq) - L440) / L2 + 69;\n  return Math.round(v * 100) / 100;\n};\n\n/**\n * Return the chroma of a note. The chroma is the numeric equivalent to the\n * pitch class, where 0 is C, 1 is C# or Db, 2 is D... 11 is B\n *\n * @param {string} note - the note name\n * @return {Integer} the chroma number\n * @example\n * Note.chroma(\"Cb\") // => 11\n * [\"C\", \"D\", \"E\", \"F\"].map(Note.chroma) // => [0, 2, 4, 5]\n */\nvar chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the octave of the given pitch\n *\n * @function\n * @param {string} note - the note\n * @return {Integer} the octave or null if doesn\"t have an octave or not a valid note\n * @example\n * Note.oct(\"C#4\") // => 4\n * Note.oct(\"C\") // => null\n * Note.oct(\"blah\") // => undefined\n */\nvar oct = function (str) { return props(str).oct; };\n\nvar LETTERS = \"CDEFGAB\";\n/**\n * Given a step number return it\"s letter (0 = C, 1 = D, 2 = E)\n * @param {number} step\n * @return {string} the letter\n * @example\n * Note.stepToLetter(3) // => \"F\"\n */\nvar stepToLetter = function (step) { return LETTERS[step]; };\n\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\nvar numToStr = function (num, op) { return (typeof num !== \"number\" ? \"\" : op(num)); };\n\n/**\n * Given an alteration number, return the accidentals\n * @param {Number} alt\n * @return {String}\n * @example\n * Note.altToAcc(-3) // => \"bbb\"\n */\nvar altToAcc = function (alt) { return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); }); };\n\n/**\n * Creates a note name in scientific notation from note properties,\n * and optionally another note name.\n * It receives an object with:\n * - step: the note step (0 = C, 1 = D, ... 6 = B)\n * - alt: (optional) the alteration. Negative numbers are flats, positive sharps\n * - oct: (optional) the octave\n *\n * Optionally it receives another note as a \"base\", meaning that any prop not explicitly\n * received on the first parameter will be taken from that base note. That way it can be used\n * as an immutable \"set\" operator for a that base note\n *\n * @function\n * @param {Object} props - the note properties\n * @param {String} [baseNote] - note to build the result from. If given, it returns\n * the result of applying the given props to this note.\n * @return {String} the note name in scientific notation or null if not valid properties\n * @example\n * Note.from({ step: 5 }) // => \"A\"\n * Note.from({ step: 1, acc: -1 }) // => \"Db\"\n * Note.from({ step: 2, acc: 2, oct: 2 }) // => \"E##2\"\n * Note.from({ step: 7 }) // => null\n * Note.from({alt: 1, oct: 3}, \"C4\") // => \"C#3\"\n */\nvar from = function (fromProps, baseNote) {\n  if ( fromProps === void 0 ) fromProps = {};\n  if ( baseNote === void 0 ) baseNote = null;\n\n  var ref = baseNote\n    ? Object.assign({}, props(baseNote), fromProps)\n    : fromProps;\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var letter = stepToLetter(step);\n  if (!letter) { return null; }\n  var pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n};\n\n/**\n * Deprecated. This is kept for backwards compatibility only.\n * Use Note.from instead\n */\nvar build = from;\n\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61, true) // => \"C#4\"\n * // it rounds to nearest note\n * Note.fromMidi(61.7) // => \"D4\"\n */\nfunction fromMidi(num, sharps) {\n  num = Math.round(num);\n  var pcs = sharps === true ? SHARPS : FLATS;\n  var pc = pcs[num % 12];\n  var o = Math.floor(num / 12) - 1;\n  return pc + o;\n}\n\n/**\n * Simplify the note: find an enhramonic note with less accidentals.\n *\n * @param {String} note - the note to be simplified\n * @param {boolean} useSameAccType - (optional, true by default) set to true\n * to ensure the returned note has the same accidental types that the given note\n * @return {String} the simplfiied note or null if not valid note\n * @example\n * Note.simplify(\"C##\") // => \"D\"\n * Note.simplify(\"C###\") // => \"D#\"\n * Note.simplify(\"C###\", false) // => \"Eb\"\n * Note.simplify(\"B#4\") // => \"C5\"\n */\nvar simplify = function (note, sameAcc) {\n  var ref = props(note);\n  var alt = ref.alt;\n  var chroma = ref.chroma;\n  var midi = ref.midi;\n  if (chroma === null) { return null; }\n  var useSharps = sameAcc === false ? alt < 0 : alt > 0;\n  return midi === null\n    ? pc(fromMidi(chroma, useSharps))\n    : fromMidi(midi, useSharps);\n};\n\n/**\n * Get the simplified and enhramonic note of the given one.\n *\n * @param {String} note\n * @return {String} the enhramonic note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enhramonic(\"C\") // => \"C\"\n */\nvar enharmonic = function (note) { return simplify(note, false); };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tonal-note/build/es6.js\n");

/***/ }),

/***/ "./node_modules/tonal-pcset/build/es6.js":
/*!***********************************************!*\
  !*** ./node_modules/tonal-pcset/build/es6.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chroma: () => (/* binding */ chroma),\n/* harmony export */   chromas: () => (/* binding */ chromas),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   includes: () => (/* binding */ includes),\n/* harmony export */   intervals: () => (/* binding */ intervals),\n/* harmony export */   isChroma: () => (/* binding */ isChroma),\n/* harmony export */   isEqual: () => (/* binding */ isEqual),\n/* harmony export */   isSubsetOf: () => (/* binding */ isSubsetOf),\n/* harmony export */   isSupersetOf: () => (/* binding */ isSupersetOf),\n/* harmony export */   modes: () => (/* binding */ modes)\n/* harmony export */ });\n/* harmony import */ var tonal_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tonal-note */ \"./node_modules/tonal-note/build/es6.js\");\n/* harmony import */ var tonal_interval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tonal-interval */ \"./node_modules/tonal-interval/build/es6.js\");\n/* harmony import */ var tonal_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tonal-array */ \"./node_modules/tonal-array/build/es6.js\");\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * // es6\n * import PcSet from \"tonal-pcset\"\n * var PcSet = require(\"tonal-pcset\")\n *\n * PcSet.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n * ```\n *\n * ## API documentation\n *\n * @module PcSet\n */\n\n\n\n\nvar chr = function (str) { return (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.chroma)(str) || (0,tonal_interval__WEBPACK_IMPORTED_MODULE_1__.chroma)(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar clen = function (chroma) { return chroma.replace(/0/g, \"\").length; };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {String} a binary representation of the pitch class set\n * @example\n * PcSet.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nfunction chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\nvar all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @return {Array} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nfunction chromas(n) {\n  all = all || (0,tonal_array__WEBPACK_IMPORTED_MODULE_2__.range)(2048, 4095).map(function (n) { return n.toString(2); });\n  return typeof n === \"number\"\n    ? all.filter(function (chroma) { return clen(chroma) === n; })\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * PcSet.modes([\"C\", \"D\", \"E\"]).map(PcSet.intervals)\n */\nfunction modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return (0,tonal_array__WEBPACK_IMPORTED_MODULE_2__.compact)(\n    binary.map(function(_, i) {\n      var r = (0,tonal_array__WEBPACK_IMPORTED_MODULE_2__.rotate)(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {String} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * PcSet.isChroma(\"101010101010\") // => true\n * PcSet.isChroma(\"101001\") // => false\n */\nfunction isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * PcSet.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nfunction intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return (0,tonal_array__WEBPACK_IMPORTED_MODULE_2__.compact)(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * PcSet.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nfunction isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = PcSet.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nfunction isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = PcSet.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nfunction isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nfunction includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * PcSet.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * PcSet.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nfunction filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdG9uYWwtcGNzZXQvYnVpbGQvZXM2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQytDO0FBQ0c7QUFDRzs7QUFFckQsMkJBQTJCLE9BQU8sa0RBQU8sU0FBUyxzREFBTTtBQUN4RCxnQ0FBZ0M7QUFDaEMsK0JBQStCOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ087QUFDUCx1QkFBdUI7QUFDdkIsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDTztBQUNQLGVBQWUsa0RBQUssZ0NBQWdDLHVCQUF1QjtBQUMzRTtBQUNBLHFDQUFxQyw0QkFBNEI7QUFDakU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsWUFBWSxlQUFlO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsU0FBUyxvREFBTztBQUNoQjtBQUNBLGNBQWMsbURBQU07QUFDcEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxtQkFBbUIsR0FBRztBQUN0QjtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asd0JBQXdCO0FBQ3hCLFNBQVMsb0RBQU87QUFDaEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLGNBQWM7QUFDekIsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0NBQWdDLHNCQUFzQjtBQUN0RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLGNBQWM7QUFDekIsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsV0FBVyxjQUFjO0FBQ3pCLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsV0FBVyxjQUFjO0FBQ3pCLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsY0FBYztBQUN6QixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0NBQWdDLHNCQUFzQjtBQUN0RDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xoLy4vbm9kZV9tb2R1bGVzL3RvbmFsLXBjc2V0L2J1aWxkL2VzNi5qcz9kMmI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogWyFbbnBtIHZlcnNpb25dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL3YvdG9uYWwtcGNzZXQuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlKV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdG9uYWwtcGNzZXQpXG4gKiBbIVt0b25hbF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS90b25hbC1wY3NldC15ZWxsb3cuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlKV0oaHR0cHM6Ly93d3cubnBtanMuY29tL2Jyb3dzZS9rZXl3b3JkL3RvbmFsKVxuICpcbiAqIGB0b25hbC1wY3NldGAgaXMgYSBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGggcGl0Y2ggY2xhc3Mgc2V0cywgb3JpZW50ZWRcbiAqIHRvIG1ha2UgY29tcGFyYXRpb25zIChpc0VxdWFsLCBpc1N1YnNldCwgaXNTdXBlcnNldClcbiAqXG4gKiBUaGlzIGlzIHBhcnQgb2YgW3RvbmFsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS90b25hbCkgbXVzaWMgdGhlb3J5IGxpYnJhcnkuXG4gKlxuICogWW91IGNhbiBpbnN0YWxsIHZpYSBucG06IGBucG0gaSAtLXNhdmUgdG9uYWwtcGNzZXRgXG4gKlxuICogYGBganNcbiAqIC8vIGVzNlxuICogaW1wb3J0IFBjU2V0IGZyb20gXCJ0b25hbC1wY3NldFwiXG4gKiB2YXIgUGNTZXQgPSByZXF1aXJlKFwidG9uYWwtcGNzZXRcIilcbiAqXG4gKiBQY1NldC5pc0VxdWFsKFwiYzIgZDUgZTZcIiwgXCJjNiBlMyBkMVwiKSAvLyA9PiB0cnVlXG4gKiBgYGBcbiAqXG4gKiAjIyBBUEkgZG9jdW1lbnRhdGlvblxuICpcbiAqIEBtb2R1bGUgUGNTZXRcbiAqL1xuaW1wb3J0IHsgY2hyb21hIGFzIG5vdGVjaHIgfSBmcm9tIFwidG9uYWwtbm90ZVwiO1xuaW1wb3J0IHsgY2hyb21hIGFzIGl2bGNociB9IGZyb20gXCJ0b25hbC1pbnRlcnZhbFwiO1xuaW1wb3J0IHsgcm90YXRlLCByYW5nZSwgY29tcGFjdCB9IGZyb20gXCJ0b25hbC1hcnJheVwiO1xuXG52YXIgY2hyID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gbm90ZWNocihzdHIpIHx8IGl2bGNocihzdHIpIHx8IDA7IH07XG52YXIgcGNzZXROdW0gPSBmdW5jdGlvbiAoc2V0KSB7IHJldHVybiBwYXJzZUludChjaHJvbWEoc2V0KSwgMik7IH07XG52YXIgY2xlbiA9IGZ1bmN0aW9uIChjaHJvbWEpIHsgcmV0dXJuIGNocm9tYS5yZXBsYWNlKC8wL2csIFwiXCIpLmxlbmd0aDsgfTtcblxuLyoqXG4gKiBHZXQgY2hyb21hIG9mIGEgcGl0Y2ggY2xhc3Mgc2V0LiBBIGNocm9tYSBpZGVudGlmaWVzIGVhY2ggc2V0IHVuaXF1ZWx5LlxuICogSXRcInMgYSAxMi1kaWdpdCBiaW5hcnkgZWFjaCBwcmVzZW50aW5nIG9uZSBzZW1pdG9uZSBvZiB0aGUgb2N0YXZlLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGFjY2VwdHMgYSBjaHJvbWEgYXMgcGFyYW1ldGVyIGFuZCByZXR1cm4gaXRcbiAqIHdpdGhvdXQgbW9kaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBzZXQgLSB0aGUgcGl0Y2ggY2xhc3Mgc2V0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IGEgYmluYXJ5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwaXRjaCBjbGFzcyBzZXRcbiAqIEBleGFtcGxlXG4gKiBQY1NldC5jaHJvbWEoW1wiQ1wiLCBcIkRcIiwgXCJFXCJdKSAvLyA9PiBcIjEwMTAxMDAwMDAwMDBcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hyb21hKHNldCkge1xuICBpZiAoaXNDaHJvbWEoc2V0KSkgeyByZXR1cm4gc2V0OyB9XG4gIGlmICghQXJyYXkuaXNBcnJheShzZXQpKSB7IHJldHVybiBcIlwiOyB9XG4gIHZhciBiID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICBzZXQubWFwKGNocikuZm9yRWFjaChmdW5jdGlvbiAoaSkge1xuICAgIGJbaV0gPSAxO1xuICB9KTtcbiAgcmV0dXJuIGIuam9pbihcIlwiKTtcbn1cblxudmFyIGFsbCA9IG51bGw7XG4vKipcbiAqIEdldCBhIGxpc3Qgb2YgYWxsIHBvc3NpYmxlIGNocm9tYXMgKGFsbCBwb3NzaWJsZSBzY2FsZXMpXG4gKiBNb3JlIGluZm9ybWF0aW9uOiBodHRwOi8vYWxsdGhlc2NhbGVzLm9yZy9cbiAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBwb3NzaWJsZSBjaHJvbWFzIGZyb20gJzEwMDAwMDAwMDAwJyB0byAnMTExMTExMTExMTEnXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hyb21hcyhuKSB7XG4gIGFsbCA9IGFsbCB8fCByYW5nZSgyMDQ4LCA0MDk1KS5tYXAoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIG4udG9TdHJpbmcoMik7IH0pO1xuICByZXR1cm4gdHlwZW9mIG4gPT09IFwibnVtYmVyXCJcbiAgICA/IGFsbC5maWx0ZXIoZnVuY3Rpb24gKGNocm9tYSkgeyByZXR1cm4gY2xlbihjaHJvbWEpID09PSBuOyB9KVxuICAgIDogYWxsLnNsaWNlKCk7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBhIGxpc3Qgb2Ygbm90ZXMgb3IgYSBwY3NldCBjaHJvbWEsIHByb2R1Y2UgdGhlIHJvdGF0aW9uc1xuICogb2YgdGhlIGNocm9tYSBkaXNjYXJkaW5nIHRoZSBvbmVzIHRoYXQgc3RhcnRzIHdpdGggXCIwXCJcbiAqXG4gKiBUaGlzIGlzIHVzZWQsIGZvciBleGFtcGxlLCB0byBnZXQgYWxsIHRoZSBtb2RlcyBvZiBhIHNjYWxlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBzZXQgLSB0aGUgbGlzdCBvZiBub3RlcyBvciBwaXRjaENociBvZiB0aGUgc2V0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IG5vcm1hbGl6ZSAtIChPcHRpb25hbCwgdHJ1ZSBieSBkZWZhdWx0KSByZW1vdmUgYWxsXG4gKiB0aGUgcm90YXRpb25zIHRoYXQgc3RhcnRzIHdpdGggXCIwXCJcbiAqIEByZXR1cm4ge0FycmF5PFN0cmluZz59IGFuIGFycmF5IHdpdGggYWxsIHRoZSBtb2RlcyBvZiB0aGUgY2hyb21hXG4gKlxuICogQGV4YW1wbGVcbiAqIFBjU2V0Lm1vZGVzKFtcIkNcIiwgXCJEXCIsIFwiRVwiXSkubWFwKFBjU2V0LmludGVydmFscylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vZGVzKHNldCwgbm9ybWFsaXplKSB7XG4gIG5vcm1hbGl6ZSA9IG5vcm1hbGl6ZSAhPT0gZmFsc2U7XG4gIHZhciBiaW5hcnkgPSBjaHJvbWEoc2V0KS5zcGxpdChcIlwiKTtcbiAgcmV0dXJuIGNvbXBhY3QoXG4gICAgYmluYXJ5Lm1hcChmdW5jdGlvbihfLCBpKSB7XG4gICAgICB2YXIgciA9IHJvdGF0ZShpLCBiaW5hcnkpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZSAmJiByWzBdID09PSBcIjBcIiA/IG51bGwgOiByLmpvaW4oXCJcIik7XG4gICAgfSlcbiAgKTtcbn1cblxudmFyIFJFR0VYID0gL15bMDFdezEyfSQvO1xuLyoqXG4gKiBUZXN0IGlmIHRoZSBnaXZlbiBzdHJpbmcgaXMgYSBwaXRjaCBjbGFzcyBzZXQgY2hyb21hLlxuICogQHBhcmFtIHtTdHJpbmd9IGNocm9tYSAtIHRoZSBwaXRjaCBjbGFzcyBzZXQgY2hyb21hXG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGl0cyBhIHZhbGlkIHBjc2V0IGNocm9tYVxuICogQGV4YW1wbGVcbiAqIFBjU2V0LmlzQ2hyb21hKFwiMTAxMDEwMTAxMDEwXCIpIC8vID0+IHRydWVcbiAqIFBjU2V0LmlzQ2hyb21hKFwiMTAxMDAxXCIpIC8vID0+IGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Nocm9tYShzZXQpIHtcbiAgcmV0dXJuIFJFR0VYLnRlc3Qoc2V0KTtcbn1cblxudmFyIElWTFMgPSBcIjFQIDJtIDJNIDNtIDNNIDRQIDVkIDVQIDZtIDZNIDdtIDdNXCIuc3BsaXQoXCIgXCIpO1xuLyoqXG4gKiBHaXZlbiBhIHBjc2V0IChub3RlcyBvciBjaHJvbWEpIHJldHVybiBpdFwicyBpbnRlcnZhbHNcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwY3NldCAtIHRoZSBwaXRjaCBjbGFzcyBzZXQgKG5vdGVzIG9yIGNocm9tYSlcbiAqIEByZXR1cm4ge0FycmF5fSBpbnRlcnZhbHMgb3IgZW1wdHkgYXJyYXkgaWYgbm90IHZhbGlkIHBjc2V0XG4gKiBAZXhhbXBsZVxuICogUGNTZXQuaW50ZXJ2YWxzKFwiMTAxMDEwMDAwMDAwMFwiKSA9PiBbXCIxUFwiLCBcIjJNXCIsIFwiM01cIl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVydmFscyhzZXQpIHtcbiAgaWYgKCFpc0Nocm9tYShzZXQpKSB7IHJldHVybiBbXTsgfVxuICByZXR1cm4gY29tcGFjdChcbiAgICBzZXQuc3BsaXQoXCJcIikubWFwKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIHJldHVybiBkID09PSBcIjFcIiA/IElWTFNbaV0gOiBudWxsO1xuICAgIH0pXG4gICk7XG59XG5cbi8qKlxuICogVGVzdCBpZiB0d28gcGl0Y2ggY2xhc3Mgc2V0cyBhcmUgaWRlbnRpY2FsXG4gKlxuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IHNldDEgLSBvbmUgb2YgdGhlIHBpdGNoIGNsYXNzIHNldHNcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBzZXQyIC0gdGhlIG90aGVyIHBpdGNoIGNsYXNzIHNldFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGV5IGFyZSBlcXVhbFxuICogQGV4YW1wbGVcbiAqIFBjU2V0LmlzRXF1YWwoW1wiYzJcIiwgXCJkM1wiXSwgW1wiYzVcIiwgXCJkMlwiXSkgLy8gPT4gdHJ1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFcXVhbChzMSwgczIpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHsgcmV0dXJuIGZ1bmN0aW9uIChzKSB7IHJldHVybiBpc0VxdWFsKHMxLCBzKTsgfTsgfVxuICByZXR1cm4gY2hyb21hKHMxKSA9PT0gY2hyb21hKHMyKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHRlc3QgaWYgYSBjb2xsZWN0aW9uIG9mIG5vdGVzIGlzIGFcbiAqIHN1YnNldCBvZiBhIGdpdmVuIHNldFxuICpcbiAqIFRoZSBmdW5jdGlvbiBjYW4gYmUgcGFydGlhbGx5IGFwcGxpZWRcbiAqXG4gKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gc2V0IC0gYW4gYXJyYXkgb2Ygbm90ZXMgb3IgYSBjaHJvbWEgc2V0IHN0cmluZyB0byB0ZXN0IGFnYWluc3RcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBub3RlcyAtIGFuIGFycmF5IG9mIG5vdGVzIG9yIGEgY2hyb21hIHNldFxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBub3RlcyBpcyBhIHN1YnNldCBvZiBzZXQsIGZhbHNlIG90aGVyd2lzZVxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGluQ01ham9yID0gUGNTZXQuaXNTdWJzZXRPZihbXCJDXCIsIFwiRVwiLCBcIkdcIl0pXG4gKiBpbkNNYWpvcihbXCJlNlwiLCBcImM0XCJdKSAvLyA9PiB0cnVlXG4gKiBpbkNNYWpvcihbXCJlNlwiLCBcImM0XCIsIFwiZDNcIl0pIC8vID0+IGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNldE9mKHNldCwgbm90ZXMpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7IHJldHVybiBpc1N1YnNldE9mKHNldCkobm90ZXMpOyB9XG4gIHNldCA9IHBjc2V0TnVtKHNldCk7XG4gIHJldHVybiBmdW5jdGlvbihub3Rlcykge1xuICAgIG5vdGVzID0gcGNzZXROdW0obm90ZXMpO1xuICAgIHJldHVybiBub3RlcyAhPT0gc2V0ICYmIChub3RlcyAmIHNldCkgPT09IG5vdGVzO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgdGVzdCBpZiBhIGNvbGxlY3RpbyBvZiBub3RlcyBpcyBhXG4gKiBzdXBlcnNldCBvZiBhIGdpdmVuIHNldCAoaXQgY29udGFpbnMgYWxsIG5vdGVzIGFuZCBhdCBsZWFzdCBvbmUgbW9yZSlcbiAqXG4gKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gc2V0IC0gYW4gYXJyYXkgb2Ygbm90ZXMgb3IgYSBjaHJvbWEgc2V0IHN0cmluZyB0byB0ZXN0IGFnYWluc3RcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBub3RlcyAtIGFuIGFycmF5IG9mIG5vdGVzIG9yIGEgY2hyb21hIHNldFxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBub3RlcyBpcyBhIHN1cGVyc2V0IG9mIHNldCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAZXhhbXBsZVxuICogY29uc3QgZXh0ZW5kc0NNYWpvciA9IFBjU2V0LmlzU3VwZXJzZXRPZihbXCJDXCIsIFwiRVwiLCBcIkdcIl0pXG4gKiBleHRlbmRzQ01ham9yKFtcImU2XCIsIFwiYVwiLCBcImM0XCIsIFwiZzJcIl0pIC8vID0+IHRydWVcbiAqIGV4dGVuZHNDTWFqb3IoW1wiYzZcIiwgXCJlNFwiLCBcImczXCJdKSAvLyA9PiBmYWxzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdXBlcnNldE9mKHNldCwgbm90ZXMpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7IHJldHVybiBpc1N1cGVyc2V0T2Yoc2V0KShub3Rlcyk7IH1cbiAgc2V0ID0gcGNzZXROdW0oc2V0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vdGVzKSB7XG4gICAgbm90ZXMgPSBwY3NldE51bShub3Rlcyk7XG4gICAgcmV0dXJuIG5vdGVzICE9PSBzZXQgJiYgKG5vdGVzIHwgc2V0KSA9PT0gbm90ZXM7XG4gIH07XG59XG5cbi8qKlxuICogVGVzdCBpZiBhIGdpdmVuIHBpdGNoIGNsYXNzIHNldCBpbmNsdWRlcyBhIG5vdGVcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBzZXQgLSB0aGUgYmFzZSBzZXQgdG8gdGVzdCBhZ2FpbnN0XG4gKiBAcGFyYW0ge1N0cmluZ3xQaXRjaH0gbm90ZSAtIHRoZSBub3RlIHRvIHRlc3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIG5vdGUgaXMgaW5jbHVkZWQgaW4gdGhlIHBjc2V0XG4gKiBAZXhhbXBsZVxuICogUGNTZXQuaW5jbHVkZXMoW1wiQ1wiLCBcIkRcIiwgXCJFXCJdLCBcIkM0XCIpIC8vID0+IHRydWVcbiAqIFBjU2V0LmluY2x1ZGVzKFtcIkNcIiwgXCJEXCIsIFwiRVwiXSwgXCJDIzRcIikgLy8gPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluY2x1ZGVzKHNldCwgbm90ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHsgcmV0dXJuIGluY2x1ZGVzKHNldCkobm90ZSk7IH1cbiAgc2V0ID0gY2hyb21hKHNldCk7XG4gIHJldHVybiBmdW5jdGlvbihub3RlKSB7XG4gICAgcmV0dXJuIHNldFtjaHIobm90ZSldID09PSBcIjFcIjtcbiAgfTtcbn1cblxuLyoqXG4gKiBGaWx0ZXIgYSBsaXN0IHdpdGggYSBwaXRjaCBjbGFzcyBzZXRcbiAqXG4gKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gc2V0IC0gdGhlIHBpdGNoIGNsYXNzIHNldCBub3Rlc1xuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IG5vdGVzIC0gdGhlIG5vdGUgbGlzdCB0byBiZSBmaWx0ZXJlZFxuICogQHJldHVybiB7QXJyYXl9IHRoZSBmaWx0ZXJlZCBub3Rlc1xuICpcbiAqIEBleGFtcGxlXG4gKiBQY1NldC5maWx0ZXIoW1wiQ1wiLCBcIkRcIiwgXCJFXCJdLCBbXCJjMlwiLCBcImMjMlwiLCBcImQyXCIsIFwiYzNcIiwgXCJjIzNcIiwgXCJkM1wiXSkgLy8gPT4gWyBcImMyXCIsIFwiZDJcIiwgXCJjM1wiLCBcImQzXCIgXSlcbiAqIFBjU2V0LmZpbHRlcihbXCJDMlwiXSwgW1wiYzJcIiwgXCJjIzJcIiwgXCJkMlwiLCBcImMzXCIsIFwiYyMzXCIsIFwiZDNcIl0pIC8vID0+IFsgXCJjMlwiLCBcImMzXCIgXSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihzZXQsIG5vdGVzKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7IHJldHVybiBmdW5jdGlvbiAobikgeyByZXR1cm4gZmlsdGVyKHNldCwgbik7IH07IH1cbiAgcmV0dXJuIG5vdGVzLmZpbHRlcihpbmNsdWRlcyhzZXQpKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/tonal-pcset/build/es6.js\n");

/***/ }),

/***/ "./node_modules/tonal-scale/build/es6.js":
/*!***********************************************!*\
  !*** ./node_modules/tonal-scale/build/es6.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chords: () => (/* binding */ chords),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   intervals: () => (/* binding */ intervals),\n/* harmony export */   modeNames: () => (/* binding */ modeNames),\n/* harmony export */   names: () => (/* binding */ names),\n/* harmony export */   notes: () => (/* binding */ notes),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   subsets: () => (/* binding */ subsets),\n/* harmony export */   supersets: () => (/* binding */ supersets),\n/* harmony export */   toScale: () => (/* binding */ toScale),\n/* harmony export */   tokenize: () => (/* binding */ tokenize)\n/* harmony export */ });\n/* harmony import */ var tonal_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tonal-note */ \"./node_modules/tonal-note/build/es6.js\");\n/* harmony import */ var tonal_pcset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tonal-pcset */ \"./node_modules/tonal-pcset/build/es6.js\");\n/* harmony import */ var tonal_distance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tonal-distance */ \"./node_modules/tonal-distance/build/es6.js\");\n/* harmony import */ var tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tonal-dictionary */ \"./node_modules/tonal-dictionary/build/es6.js\");\n/* harmony import */ var tonal_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tonal-array */ \"./node_modules/tonal-array/build/es6.js\");\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-scale.svg?style=flat-square)](https://www.npmjs.com/package/tonal-scale)\n *\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * // es6\n * import * as Scale from \"tonal-scale\"\n * // es5\n * const Scale = require(\"tonal-scale\");\n *\n * @example\n * Scale.notes(\"Ab bebop\") // => [ \"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"G\" ]\n * Scale.names() => [\"major\", \"minor\", ...]\n * @module Scale\n */\n\n\n\n\n\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = (0,tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.scale)(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = (0,tonal_pcset__WEBPACK_IMPORTED_MODULE_1__.chroma)(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Object}\n */\nvar props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * Scale.names() // => [\"maj7\", ...]\n */\nvar names = tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {String} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<String>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * Scale.intervals(\"major\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\" ]\n */\nvar intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale.\n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {String} tonic\n * @param {String} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {String} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n *\n * @example\n * Scale.notes(\"C\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C4\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"A4\", \"no-scale\") // => []\n * Scale.notes(\"blah\", \"major\") // => []\n */\nfunction notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map((0,tonal_distance__WEBPACK_IMPORTED_MODULE_2__.transpose)(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n *\n * @function\n * @param {String} name - the scale name\n * @return {Boolean}\n */\nfunction exists(name) {\n  var p = tokenize(name);\n  return (0,tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.scale)(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {String} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * Scale.tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * Scale.tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * Scale.tokenize() // => [\"\", \"\"]\n */\nfunction tokenize(str) {\n  if (typeof str !== \"string\") { return [\"\", \"\"]; }\n  var i = str.indexOf(\" \");\n  var tonic = (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.name)(str.substring(0, i)) || (0,tonal_note__WEBPACK_IMPORTED_MODULE_0__.name)(str) || \"\";\n  var name = tonic !== \"\" ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {String} name - scale name\n */\nvar modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return (0,tonal_pcset__WEBPACK_IMPORTED_MODULE_1__.modes)(ivls)\n    .map(function (chroma, i) {\n      var name = tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {String} name\n */\nvar chords = function (name) {\n  var inScale = (0,tonal_pcset__WEBPACK_IMPORTED_MODULE_1__.isSubsetOf)(intervals(name));\n  return tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.chord.names().filter(function (name) { return inScale((0,tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.chord)(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {Array} notes\n * @return {Array}\n */\nvar toScale = function (notes) {\n  var pcset = (0,tonal_array__WEBPACK_IMPORTED_MODULE_4__.compact)(notes.map(tonal_note__WEBPACK_IMPORTED_MODULE_0__.pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = (0,tonal_array__WEBPACK_IMPORTED_MODULE_4__.unique)(pcset);\n  return (0,tonal_array__WEBPACK_IMPORTED_MODULE_4__.rotate)(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of scale names\n */\nvar supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = (0,tonal_pcset__WEBPACK_IMPORTED_MODULE_1__.isSupersetOf)(intervals(name));\n  return tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.scale.names().filter(function (name) { return isSuperset((0,tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.scale)(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of scale names\n */\nvar subsets = function (name) {\n  var isSubset = (0,tonal_pcset__WEBPACK_IMPORTED_MODULE_1__.isSubsetOf)(intervals(name));\n  return tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.scale.names().filter(function (name) { return isSubset((0,tonal_dictionary__WEBPACK_IMPORTED_MODULE_3__.scale)(name)); });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tonal-scale/build/es6.js\n");

/***/ }),

/***/ "./node_modules/tonal/index.js":
/*!*************************************!*\
  !*** ./node_modules/tonal/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Array: () => (/* reexport module object */ tonal_array__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   Chord: () => (/* reexport module object */ tonal_chord__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   Dictionary: () => (/* reexport module object */ tonal_dictionary__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   Distance: () => (/* reexport module object */ tonal_distance__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   Interval: () => (/* reexport module object */ tonal_interval__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   Note: () => (/* reexport module object */ tonal_note__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   PcSet: () => (/* reexport module object */ tonal_pcset__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   Scale: () => (/* reexport module object */ tonal_scale__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   chord: () => (/* binding */ chord),\n/* harmony export */   freq: () => (/* binding */ freq),\n/* harmony export */   interval: () => (/* binding */ interval),\n/* harmony export */   midi: () => (/* binding */ midi),\n/* harmony export */   note: () => (/* binding */ note),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   transpose: () => (/* binding */ transpose)\n/* harmony export */ });\n/* harmony import */ var tonal_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tonal-array */ \"./node_modules/tonal-array/build/es6.js\");\n/* harmony import */ var tonal_note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tonal-note */ \"./node_modules/tonal-note/build/es6.js\");\n/* harmony import */ var tonal_interval__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tonal-interval */ \"./node_modules/tonal-interval/build/es6.js\");\n/* harmony import */ var tonal_distance__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tonal-distance */ \"./node_modules/tonal-distance/build/es6.js\");\n/* harmony import */ var tonal_dictionary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tonal-dictionary */ \"./node_modules/tonal-dictionary/build/es6.js\");\n/* harmony import */ var tonal_scale__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tonal-scale */ \"./node_modules/tonal-scale/build/es6.js\");\n/* harmony import */ var tonal_chord__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tonal-chord */ \"./node_modules/tonal-chord/build/es6.js\");\n/* harmony import */ var tonal_pcset__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tonal-pcset */ \"./node_modules/tonal-pcset/build/es6.js\");\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n *\n * The `Tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `Tonal.Note.pc`\n *\n * It exports the following modules:\n * - Note\n * - Interval\n * - Distance\n * - Scale\n * - Chord\n * - PcSet\n *\n * Additionally this facade exports some functions without namespace (see \"Methods\" below)\n *\n * @example\n * // es6 modules\n * import * as Tonal from \"tonal\"\n * Tonal.Note.name(\"cx\") // => \"C##\"\n *\n * @example\n * import { Note } from \"tonal\"\n * Note.name(\"bb\") // => \"Bb\"\n *\n * @example\n * // es5 node modules\n * var Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(Tonal.Note.pc(\"C#2\"), \"M3\") // => \"E#\"\n * Tonal.Chord.notes(\"Dmaj7\") // => [\"D\", \"F#\", \"A\", \"C#\"]\n *\n * @module Tonal\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Transpose a note by an interval\n * @function\n * @param {String} note\n * @param {String} interval\n * @return {String} the transported note\n * @see Distance.transpose\n */\nconst transpose = tonal_distance__WEBPACK_IMPORTED_MODULE_3__.transpose;\n\n/**\n * Get the interval from two notes\n * @function\n * @param {String} from\n * @param {String} to\n * @return {String} the interval in reverse shorthand notation\n * @see Distance.interval\n */\nconst interval = tonal_distance__WEBPACK_IMPORTED_MODULE_3__.interval;\n\n/**\n * Get note properties\n * @function\n * @param {String} note - the note name\n * @return {Object}\n * @see Note.props\n * @example\n * Tonal.note(\"A4\").chroma // => 9\n */\nconst note = tonal_note__WEBPACK_IMPORTED_MODULE_1__.props;\n\n/**\n * Get midi note number\n * @function\n * @param {String} note\n * @return {Number}\n * @see Note.midi\n * @example\n * Tonal.midi(\"A4\") // => 49\n */\nconst midi = tonal_note__WEBPACK_IMPORTED_MODULE_1__.midi;\n\n/**\n * Get note frequency using equal tempered tuning at 440\n * @function\n * @param {String} note\n * @return {Number}\n * @see Note.freq\n * @example\n * Tonal.freq(\"A4\") // => 440\n */\nconst freq = tonal_note__WEBPACK_IMPORTED_MODULE_1__.freq;\n\n/**\n * Get intervals from a chord type\n * @function\n * @param {String} type - the chord type (no tonic)\n * @return {Array} an array of intervals or undefined if the chord type is not known\n * @see Dictionary.chord\n * @example\n * Tonal.chord(\"m7b5\") // => [\"1P\", \"3m\", \"5d\", \"7m\"]\n */\nconst chord = tonal_dictionary__WEBPACK_IMPORTED_MODULE_4__.chord;\n\n/**\n * Get intervals from scale name\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Array} an array of intervals or undefiend if the scale is not kown\n * @example\n * Tonal.scale(\"major\") // => [\"1P\", \"2M\", \"3M\"...]\n */\nconst scale = tonal_dictionary__WEBPACK_IMPORTED_MODULE_4__.scale;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdG9uYWwvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ0Y7QUFDUTtBQUNBO0FBQ0k7QUFDVjtBQUNBO0FBQ0E7O0FBRXVDOztBQUU1RTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ08sa0JBQWtCLHFEQUFrQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNPLGlCQUFpQixvREFBaUI7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDTyxhQUFhLDZDQUFVOztBQUU5QjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ08sYUFBYSw0Q0FBUzs7QUFFN0I7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNPLGFBQWEsNENBQVM7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDTyxjQUFjLG1EQUFnQjs7QUFFckM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDTyxjQUFjLG1EQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NsaC8uL25vZGVfbW9kdWxlcy90b25hbC9pbmRleC5qcz9mNWFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogWyFbbnBtIHZlcnNpb25dKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL3YvdG9uYWwta2V5LnN2Zz9zdHlsZT1mbGF0LXNxdWFyZSldKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RvbmFsLWtleSlcbiAqXG4gKiBUaGUgYFRvbmFsYCBtb2R1bGUgaXMgYSBmYWNhZGUgdG8gdGhlIHJlc3Qgb2YgdGhlIG1vZHVsZXMuIFRoZXkgYXJlIG5hbWVzcGFjZWQsXG4gKiBzbyBmb3IgZXhhbXBsZSB0byB1c2UgYHBjYCBmdW5jdGlvbiBmcm9tIGB0b25hbC1ub3RlYCB5b3UgaGF2ZSB0byB3cml0ZTpcbiAqIGBUb25hbC5Ob3RlLnBjYFxuICpcbiAqIEl0IGV4cG9ydHMgdGhlIGZvbGxvd2luZyBtb2R1bGVzOlxuICogLSBOb3RlXG4gKiAtIEludGVydmFsXG4gKiAtIERpc3RhbmNlXG4gKiAtIFNjYWxlXG4gKiAtIENob3JkXG4gKiAtIFBjU2V0XG4gKlxuICogQWRkaXRpb25hbGx5IHRoaXMgZmFjYWRlIGV4cG9ydHMgc29tZSBmdW5jdGlvbnMgd2l0aG91dCBuYW1lc3BhY2UgKHNlZSBcIk1ldGhvZHNcIiBiZWxvdylcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gZXM2IG1vZHVsZXNcbiAqIGltcG9ydCAqIGFzIFRvbmFsIGZyb20gXCJ0b25hbFwiXG4gKiBUb25hbC5Ob3RlLm5hbWUoXCJjeFwiKSAvLyA9PiBcIkMjI1wiXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IE5vdGUgfSBmcm9tIFwidG9uYWxcIlxuICogTm90ZS5uYW1lKFwiYmJcIikgLy8gPT4gXCJCYlwiXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIGVzNSBub2RlIG1vZHVsZXNcbiAqIHZhciBUb25hbCA9IHJlcXVpcmUoXCJ0b25hbFwiKTtcbiAqIFRvbmFsLkRpc3RhbmNlLnRyYW5zcG9zZShUb25hbC5Ob3RlLnBjKFwiQyMyXCIpLCBcIk0zXCIpIC8vID0+IFwiRSNcIlxuICogVG9uYWwuQ2hvcmQubm90ZXMoXCJEbWFqN1wiKSAvLyA9PiBbXCJEXCIsIFwiRiNcIiwgXCJBXCIsIFwiQyNcIl1cbiAqXG4gKiBAbW9kdWxlIFRvbmFsXG4gKi9cbmltcG9ydCAqIGFzIEFycmF5IGZyb20gXCJ0b25hbC1hcnJheVwiO1xuaW1wb3J0ICogYXMgTm90ZSBmcm9tIFwidG9uYWwtbm90ZVwiO1xuaW1wb3J0ICogYXMgSW50ZXJ2YWwgZnJvbSBcInRvbmFsLWludGVydmFsXCI7XG5pbXBvcnQgKiBhcyBEaXN0YW5jZSBmcm9tIFwidG9uYWwtZGlzdGFuY2VcIjtcbmltcG9ydCAqIGFzIERpY3Rpb25hcnkgZnJvbSBcInRvbmFsLWRpY3Rpb25hcnlcIjtcbmltcG9ydCAqIGFzIFNjYWxlIGZyb20gXCJ0b25hbC1zY2FsZVwiO1xuaW1wb3J0ICogYXMgQ2hvcmQgZnJvbSBcInRvbmFsLWNob3JkXCI7XG5pbXBvcnQgKiBhcyBQY1NldCBmcm9tIFwidG9uYWwtcGNzZXRcIjtcblxuZXhwb3J0IHsgQXJyYXksIE5vdGUsIEludGVydmFsLCBEaXN0YW5jZSwgU2NhbGUsIENob3JkLCBQY1NldCwgRGljdGlvbmFyeSB9O1xuXG4vKipcbiAqIFRyYW5zcG9zZSBhIG5vdGUgYnkgYW4gaW50ZXJ2YWxcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IG5vdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnRlcnZhbFxuICogQHJldHVybiB7U3RyaW5nfSB0aGUgdHJhbnNwb3J0ZWQgbm90ZVxuICogQHNlZSBEaXN0YW5jZS50cmFuc3Bvc2VcbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zcG9zZSA9IERpc3RhbmNlLnRyYW5zcG9zZTtcblxuLyoqXG4gKiBHZXQgdGhlIGludGVydmFsIGZyb20gdHdvIG5vdGVzXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBmcm9tXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9cbiAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGludGVydmFsIGluIHJldmVyc2Ugc2hvcnRoYW5kIG5vdGF0aW9uXG4gKiBAc2VlIERpc3RhbmNlLmludGVydmFsXG4gKi9cbmV4cG9ydCBjb25zdCBpbnRlcnZhbCA9IERpc3RhbmNlLmludGVydmFsO1xuXG4vKipcbiAqIEdldCBub3RlIHByb3BlcnRpZXNcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IG5vdGUgLSB0aGUgbm90ZSBuYW1lXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAc2VlIE5vdGUucHJvcHNcbiAqIEBleGFtcGxlXG4gKiBUb25hbC5ub3RlKFwiQTRcIikuY2hyb21hIC8vID0+IDlcbiAqL1xuZXhwb3J0IGNvbnN0IG5vdGUgPSBOb3RlLnByb3BzO1xuXG4vKipcbiAqIEdldCBtaWRpIG5vdGUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBub3RlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAc2VlIE5vdGUubWlkaVxuICogQGV4YW1wbGVcbiAqIFRvbmFsLm1pZGkoXCJBNFwiKSAvLyA9PiA0OVxuICovXG5leHBvcnQgY29uc3QgbWlkaSA9IE5vdGUubWlkaTtcblxuLyoqXG4gKiBHZXQgbm90ZSBmcmVxdWVuY3kgdXNpbmcgZXF1YWwgdGVtcGVyZWQgdHVuaW5nIGF0IDQ0MFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gbm90ZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQHNlZSBOb3RlLmZyZXFcbiAqIEBleGFtcGxlXG4gKiBUb25hbC5mcmVxKFwiQTRcIikgLy8gPT4gNDQwXG4gKi9cbmV4cG9ydCBjb25zdCBmcmVxID0gTm90ZS5mcmVxO1xuXG4vKipcbiAqIEdldCBpbnRlcnZhbHMgZnJvbSBhIGNob3JkIHR5cGVcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSB0aGUgY2hvcmQgdHlwZSAobm8gdG9uaWMpXG4gKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2YgaW50ZXJ2YWxzIG9yIHVuZGVmaW5lZCBpZiB0aGUgY2hvcmQgdHlwZSBpcyBub3Qga25vd25cbiAqIEBzZWUgRGljdGlvbmFyeS5jaG9yZFxuICogQGV4YW1wbGVcbiAqIFRvbmFsLmNob3JkKFwibTdiNVwiKSAvLyA9PiBbXCIxUFwiLCBcIjNtXCIsIFwiNWRcIiwgXCI3bVwiXVxuICovXG5leHBvcnQgY29uc3QgY2hvcmQgPSBEaWN0aW9uYXJ5LmNob3JkO1xuXG4vKipcbiAqIEdldCBpbnRlcnZhbHMgZnJvbSBzY2FsZSBuYW1lXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIHNjYWxlIG5hbWUgKHdpdGhvdXQgdG9uaWMpXG4gKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2YgaW50ZXJ2YWxzIG9yIHVuZGVmaWVuZCBpZiB0aGUgc2NhbGUgaXMgbm90IGtvd25cbiAqIEBleGFtcGxlXG4gKiBUb25hbC5zY2FsZShcIm1ham9yXCIpIC8vID0+IFtcIjFQXCIsIFwiMk1cIiwgXCIzTVwiLi4uXVxuICovXG5leHBvcnQgY29uc3Qgc2NhbGUgPSBEaWN0aW9uYXJ5LnNjYWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/tonal/index.js\n");

/***/ }),

/***/ "./node_modules/tonal-dictionary/build/data/chords.json":
/*!**************************************************************!*\
  !*** ./node_modules/tonal-dictionary/build/data/chords.json ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"4":["1P 4P 7m 10m",["quartal"]],"5":["1P 5P"],"7":["1P 3M 5P 7m",["Dominant","Dom"]],"9":["1P 3M 5P 7m 9M",["79"]],"11":["1P 5P 7m 9M 11P"],"13":["1P 3M 5P 7m 9M 13M",["13_"]],"64":["5P 8P 10M"],"M":["1P 3M 5P",["Major",""]],"M#5":["1P 3M 5A",["augmented","maj#5","Maj#5","+","aug"]],"M#5add9":["1P 3M 5A 9M",["+add9"]],"M13":["1P 3M 5P 7M 9M 13M",["maj13","Maj13"]],"M13#11":["1P 3M 5P 7M 9M 11A 13M",["maj13#11","Maj13#11","M13+4","M13#4"]],"M6":["1P 3M 5P 13M",["6"]],"M6#11":["1P 3M 5P 6M 11A",["M6b5","6#11","6b5"]],"M69":["1P 3M 5P 6M 9M",["69"]],"M69#11":["1P 3M 5P 6M 9M 11A"],"M7#11":["1P 3M 5P 7M 11A",["maj7#11","Maj7#11","M7+4","M7#4"]],"M7#5":["1P 3M 5A 7M",["maj7#5","Maj7#5","maj9#5","M7+"]],"M7#5sus4":["1P 4P 5A 7M"],"M7#9#11":["1P 3M 5P 7M 9A 11A"],"M7add13":["1P 3M 5P 6M 7M 9M"],"M7b5":["1P 3M 5d 7M"],"M7b6":["1P 3M 6m 7M"],"M7b9":["1P 3M 5P 7M 9m"],"M7sus4":["1P 4P 5P 7M"],"M9":["1P 3M 5P 7M 9M",["maj9","Maj9"]],"M9#11":["1P 3M 5P 7M 9M 11A",["maj9#11","Maj9#11","M9+4","M9#4"]],"M9#5":["1P 3M 5A 7M 9M",["Maj9#5"]],"M9#5sus4":["1P 4P 5A 7M 9M"],"M9b5":["1P 3M 5d 7M 9M"],"M9sus4":["1P 4P 5P 7M 9M"],"Madd9":["1P 3M 5P 9M",["2","add9","add2"]],"Maj7":["1P 3M 5P 7M",["maj7","M7"]],"Mb5":["1P 3M 5d"],"Mb6":["1P 3M 13m"],"Msus2":["1P 2M 5P",["add9no3","sus2"]],"Msus4":["1P 4P 5P",["sus","sus4"]],"Maddb9":["1P 3M 5P 9m"],"11b9":["1P 5P 7m 9m 11P"],"13#11":["1P 3M 5P 7m 9M 11A 13M",["13+4","13#4"]],"13#9":["1P 3M 5P 7m 9A 13M",["13#9_"]],"13#9#11":["1P 3M 5P 7m 9A 11A 13M"],"13b5":["1P 3M 5d 6M 7m 9M"],"13b9":["1P 3M 5P 7m 9m 13M"],"13b9#11":["1P 3M 5P 7m 9m 11A 13M"],"13no5":["1P 3M 7m 9M 13M"],"13sus4":["1P 4P 5P 7m 9M 13M",["13sus"]],"69#11":["1P 3M 5P 6M 9M 11A"],"7#11":["1P 3M 5P 7m 11A",["7+4","7#4","7#11_","7#4_"]],"7#11b13":["1P 3M 5P 7m 11A 13m",["7b5b13"]],"7#5":["1P 3M 5A 7m",["+7","7aug","aug7"]],"7#5#9":["1P 3M 5A 7m 9A",["7alt","7#5#9_","7#9b13_"]],"7#5b9":["1P 3M 5A 7m 9m"],"7#5b9#11":["1P 3M 5A 7m 9m 11A"],"7#5sus4":["1P 4P 5A 7m"],"7#9":["1P 3M 5P 7m 9A",["7#9_"]],"7#9#11":["1P 3M 5P 7m 9A 11A",["7b5#9"]],"7#9#11b13":["1P 3M 5P 7m 9A 11A 13m"],"7#9b13":["1P 3M 5P 7m 9A 13m"],"7add6":["1P 3M 5P 7m 13M",["67","7add13"]],"7b13":["1P 3M 7m 13m"],"7b5":["1P 3M 5d 7m"],"7b6":["1P 3M 5P 6m 7m"],"7b9":["1P 3M 5P 7m 9m"],"7b9#11":["1P 3M 5P 7m 9m 11A",["7b5b9"]],"7b9#9":["1P 3M 5P 7m 9m 9A"],"7b9b13":["1P 3M 5P 7m 9m 13m"],"7b9b13#11":["1P 3M 5P 7m 9m 11A 13m",["7b9#11b13","7b5b9b13"]],"7no5":["1P 3M 7m"],"7sus4":["1P 4P 5P 7m",["7sus"]],"7sus4b9":["1P 4P 5P 7m 9m",["susb9","7susb9","7b9sus","7b9sus4","phryg"]],"7sus4b9b13":["1P 4P 5P 7m 9m 13m",["7b9b13sus4"]],"9#11":["1P 3M 5P 7m 9M 11A",["9+4","9#4","9#11_","9#4_"]],"9#11b13":["1P 3M 5P 7m 9M 11A 13m",["9b5b13"]],"9#5":["1P 3M 5A 7m 9M",["9+"]],"9#5#11":["1P 3M 5A 7m 9M 11A"],"9b13":["1P 3M 7m 9M 13m"],"9b5":["1P 3M 5d 7m 9M"],"9no5":["1P 3M 7m 9M"],"9sus4":["1P 4P 5P 7m 9M",["9sus"]],"m":["1P 3m 5P"],"m#5":["1P 3m 5A",["m+","mb6"]],"m11":["1P 3m 5P 7m 9M 11P",["_11"]],"m11A 5":["1P 3m 6m 7m 9M 11P"],"m11b5":["1P 3m 7m 12d 2M 4P",["h11","_11b5"]],"m13":["1P 3m 5P 7m 9M 11P 13M",["_13"]],"m6":["1P 3m 4P 5P 13M",["_6"]],"m69":["1P 3m 5P 6M 9M",["_69"]],"m7":["1P 3m 5P 7m",["minor7","_","_7"]],"m7#5":["1P 3m 6m 7m"],"m7add11":["1P 3m 5P 7m 11P",["m7add4"]],"m7b5":["1P 3m 5d 7m",["half-diminished","h7","_7b5"]],"m9":["1P 3m 5P 7m 9M",["_9"]],"m9#5":["1P 3m 6m 7m 9M"],"m9b5":["1P 3m 7m 12d 2M",["h9","-9b5"]],"mMaj7":["1P 3m 5P 7M",["mM7","_M7"]],"mMaj7b6":["1P 3m 5P 6m 7M",["mM7b6"]],"mM9":["1P 3m 5P 7M 9M",["mMaj9","-M9"]],"mM9b6":["1P 3m 5P 6m 7M 9M",["mMaj9b6"]],"mb6M7":["1P 3m 6m 7M"],"mb6b9":["1P 3m 6m 9m"],"o":["1P 3m 5d",["mb5","dim"]],"o7":["1P 3m 5d 13M",["diminished","m6b5","dim7"]],"o7M7":["1P 3m 5d 6M 7M"],"oM7":["1P 3m 5d 7M"],"sus24":["1P 2M 4P 5P",["sus4add9"]],"+add#9":["1P 3M 5A 9A"],"madd4":["1P 3m 4P 5P"],"madd9":["1P 3m 5P 9M"]}');

/***/ }),

/***/ "./node_modules/tonal-dictionary/build/data/scales.json":
/*!**************************************************************!*\
  !*** ./node_modules/tonal-dictionary/build/data/scales.json ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"chromatic":["1P 2m 2M 3m 3M 4P 4A 5P 6m 6M 7m 7M"],"lydian":["1P 2M 3M 4A 5P 6M 7M"],"major":["1P 2M 3M 4P 5P 6M 7M",["ionian"]],"mixolydian":["1P 2M 3M 4P 5P 6M 7m",["dominant"]],"dorian":["1P 2M 3m 4P 5P 6M 7m"],"aeolian":["1P 2M 3m 4P 5P 6m 7m",["minor"]],"phrygian":["1P 2m 3m 4P 5P 6m 7m"],"locrian":["1P 2m 3m 4P 5d 6m 7m"],"melodic minor":["1P 2M 3m 4P 5P 6M 7M"],"melodic minor second mode":["1P 2m 3m 4P 5P 6M 7m"],"lydian augmented":["1P 2M 3M 4A 5A 6M 7M"],"lydian dominant":["1P 2M 3M 4A 5P 6M 7m",["lydian b7"]],"melodic minor fifth mode":["1P 2M 3M 4P 5P 6m 7m",["hindu","mixolydian b6M"]],"locrian #2":["1P 2M 3m 4P 5d 6m 7m"],"locrian major":["1P 2M 3M 4P 5d 6m 7m",["arabian"]],"altered":["1P 2m 3m 3M 5d 6m 7m",["super locrian","diminished whole tone","pomeroy"]],"major pentatonic":["1P 2M 3M 5P 6M",["pentatonic"]],"lydian pentatonic":["1P 3M 4A 5P 7M",["chinese"]],"mixolydian pentatonic":["1P 3M 4P 5P 7m",["indian"]],"locrian pentatonic":["1P 3m 4P 5d 7m",["minor seven flat five pentatonic"]],"minor pentatonic":["1P 3m 4P 5P 7m"],"minor six pentatonic":["1P 3m 4P 5P 6M"],"minor hexatonic":["1P 2M 3m 4P 5P 7M"],"flat three pentatonic":["1P 2M 3m 5P 6M",["kumoi"]],"flat six pentatonic":["1P 2M 3M 5P 6m"],"major flat two pentatonic":["1P 2m 3M 5P 6M"],"whole tone pentatonic":["1P 3M 5d 6m 7m"],"ionian pentatonic":["1P 3M 4P 5P 7M"],"lydian #5P pentatonic":["1P 3M 4A 5A 7M"],"lydian dominant pentatonic":["1P 3M 4A 5P 7m"],"minor #7M pentatonic":["1P 3m 4P 5P 7M"],"super locrian pentatonic":["1P 3m 4d 5d 7m"],"in-sen":["1P 2m 4P 5P 7m"],"iwato":["1P 2m 4P 5d 7m"],"hirajoshi":["1P 2M 3m 5P 6m"],"kumoijoshi":["1P 2m 4P 5P 6m"],"pelog":["1P 2m 3m 5P 6m"],"vietnamese 1":["1P 3m 4P 5P 6m"],"vietnamese 2":["1P 3m 4P 5P 7m"],"prometheus":["1P 2M 3M 4A 6M 7m"],"prometheus neopolitan":["1P 2m 3M 4A 6M 7m"],"ritusen":["1P 2M 4P 5P 6M"],"scriabin":["1P 2m 3M 5P 6M"],"piongio":["1P 2M 4P 5P 6M 7m"],"major blues":["1P 2M 3m 3M 5P 6M"],"minor blues":["1P 3m 4P 5d 5P 7m",["blues"]],"composite blues":["1P 2M 3m 3M 4P 5d 5P 6M 7m"],"augmented":["1P 2A 3M 5P 5A 7M"],"augmented heptatonic":["1P 2A 3M 4P 5P 5A 7M"],"dorian #4":["1P 2M 3m 4A 5P 6M 7m"],"lydian diminished":["1P 2M 3m 4A 5P 6M 7M"],"whole tone":["1P 2M 3M 4A 5A 7m"],"leading whole tone":["1P 2M 3M 4A 5A 7m 7M"],"harmonic minor":["1P 2M 3m 4P 5P 6m 7M"],"lydian minor":["1P 2M 3M 4A 5P 6m 7m"],"neopolitan":["1P 2m 3m 4P 5P 6m 7M"],"neopolitan minor":["1P 2m 3m 4P 5P 6m 7M"],"neopolitan major":["1P 2m 3m 4P 5P 6M 7M",["dorian b2"]],"neopolitan major pentatonic":["1P 3M 4P 5d 7m"],"romanian minor":["1P 2M 3m 5d 5P 6M 7m"],"double harmonic lydian":["1P 2m 3M 4A 5P 6m 7M"],"diminished":["1P 2M 3m 4P 5d 6m 6M 7M"],"harmonic major":["1P 2M 3M 4P 5P 6m 7M"],"double harmonic major":["1P 2m 3M 4P 5P 6m 7M",["gypsy"]],"egyptian":["1P 2M 4P 5P 7m"],"hungarian minor":["1P 2M 3m 4A 5P 6m 7M"],"hungarian major":["1P 2A 3M 4A 5P 6M 7m"],"oriental":["1P 2m 3M 4P 5d 6M 7m"],"spanish":["1P 2m 3M 4P 5P 6m 7m",["phrygian major"]],"spanish heptatonic":["1P 2m 3m 3M 4P 5P 6m 7m"],"flamenco":["1P 2m 3m 3M 4A 5P 7m"],"balinese":["1P 2m 3m 4P 5P 6m 7M"],"todi raga":["1P 2m 3m 4A 5P 6m 7M"],"malkos raga":["1P 3m 4P 6m 7m"],"kafi raga":["1P 3m 3M 4P 5P 6M 7m 7M"],"purvi raga":["1P 2m 3M 4P 4A 5P 6m 7M"],"persian":["1P 2m 3M 4P 5d 6m 7M"],"bebop":["1P 2M 3M 4P 5P 6M 7m 7M"],"bebop dominant":["1P 2M 3M 4P 5P 6M 7m 7M"],"bebop minor":["1P 2M 3m 3M 4P 5P 6M 7m"],"bebop major":["1P 2M 3M 4P 5P 5A 6M 7M"],"bebop locrian":["1P 2m 3m 4P 5d 5P 6m 7m"],"minor bebop":["1P 2M 3m 4P 5P 6m 7m 7M"],"mystery #1":["1P 2m 3M 5d 6m 7m"],"enigmatic":["1P 2m 3M 5d 6m 7m 7M"],"minor six diminished":["1P 2M 3m 4P 5P 6m 6M 7M"],"ionian augmented":["1P 2M 3M 4P 5A 6M 7M"],"lydian #9":["1P 2m 3M 4A 5P 6M 7M"],"ichikosucho":["1P 2M 3M 4P 5d 5P 6M 7M"],"six tone symmetric":["1P 2m 3M 4P 5A 6M"]}');

/***/ })

}]);